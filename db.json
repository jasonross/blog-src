{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/pacman/source/js/jquery-2.1.0.min.js","path":"js/jquery-2.1.0.min.js","modified":0},{"_id":"themes/pacman/source/img/pacman.jpg","path":"img/pacman.jpg","modified":0},{"_id":"themes/pacman/source/img/logo.svg","path":"img/logo.svg","modified":0},{"_id":"themes/pacman/source/img/favicon.ico","path":"img/favicon.ico","modified":0},{"_id":"themes/pacman/source/img/author.jpg","path":"img/author.jpg","modified":0},{"_id":"themes/pacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":0},{"_id":"themes/pacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":0},{"_id":"themes/pacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":0},{"_id":"themes/pacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":0},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":0},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":0},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":0},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":0},{"_id":"themes/pacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":0},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/pacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/pacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/pacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/pacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/pacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/pacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/pacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/pacman/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"source/ShowDeskTop.app.zip","path":"ShowDeskTop.app.zip","modified":0}],"Cache":[{"_id":"source/_posts/Data Binding.md","shasum":"5c07db80469c37374b9439d55367cee8a97d7cb9","modified":1436199499000},{"_id":"source/_posts/android-sdk-mirror.md","shasum":"63de6298bd97384843f1fd9f1fec1deaf98ebd37","modified":1444583318000},{"_id":"source/404.html","shasum":"be997f90c63281205207cd163164942515eddae0","modified":1399862304000},{"_id":"source/_posts/android-studio-plugin-dev.md","shasum":"d6364c05ab6bf4da0097157b4671ecd03a30e00c","modified":1445111699000},{"_id":"source/_posts/field-65535.md","shasum":"8980e7d65508b20d251a2416d2c84adfe40db59d","modified":1445504251000},{"_id":"source/_posts/gradle-android.md","shasum":"47b992599acbd8dab0bd8666cc3503f4e31e1902","modified":1443081370000},{"_id":"source/_posts/hack_ttt.md","shasum":"3ce5d67ba224f98d057d890c5928df0a327b913e","modified":1424520995000},{"_id":"source/_posts/hello-world.md","shasum":"7763baaf4985914e9a72dad0e9bff468ebe653bb","modified":1436362362000},{"_id":"source/_posts/memory_leak.md","shasum":"8efec6de5c4db3c0ac9f993bc5a985337fb970ac","modified":1423119289000},{"_id":"source/_posts/ontheway-2014.md","shasum":"891a156794fb3ba4926330db491fbf88a03fd14e","modified":1424183055000},{"_id":"source/_posts/mac-application-show-desktop.md","shasum":"81e999785bfce7d0a498085c1eb9255ca063ca84","modified":1424536112000},{"_id":"source/about/index.md","shasum":"447c328d792155b57f8a783e42eb8cbe7fa17fb1","modified":1444139829000},{"_id":"source/_posts/xiaomi_database_leak.md","shasum":"09b095c70f17dccda5292df69e1a15a6d8dd6fb4","modified":1410881476000},{"_id":"source/_posts/slack-android.md","shasum":"6ae6dc0e5fcfadaa9600aaab33f4b42acf6babc4","modified":1436763333000},{"_id":"source/_posts/webview-js-safety.md","shasum":"08b82b4efd42b360d58b98d8f642745129372027","modified":1410881340000},{"_id":"source/milestone/index.md","shasum":"f3d7f746bc5b075db9a1991c906a104205fcb471","modified":1424943431000},{"_id":"source/pay/index.md","shasum":"b7e88273a9c8f93139c4596602314269de0336bb","modified":1445584100000},{"_id":"source/ShowDeskTop.app.zip","shasum":"d0551d2f54f4bcc9f4729a63fcebfa8d16ed7c3c","modified":1424533781000},{"_id":"themes/pacman/LICENSE","shasum":"0138565d68df6e5536667ad445232981ea808aec","modified":1399789752000},{"_id":"themes/pacman/languages/default.yml","shasum":"f4f281fa0441cbda7d7c83f7aecd42e61f45ccd4","modified":1423113946000},{"_id":"themes/pacman/_config.yml","shasum":"505808273587444e406afce3f9f368ac51a3ce3d","modified":1445500457000},{"_id":"themes/pacman/README.md","shasum":"5b6b5116481ab80436176e2f6391c6f9679d8c3b","modified":1399789754000},{"_id":"themes/pacman/layout/_partial/after_footer.ejs","shasum":"af5d700c7e22e364216535142bc0adc798fac22f","modified":1399789754000},{"_id":"themes/pacman/layout/_partial/archive.ejs","shasum":"a1ada891cbacf49b397cfa7dd921bdd0ae545a4e","modified":1399789754000},{"_id":"themes/pacman/languages/zh-TW.yml","shasum":"985585814a1307a42f0b6e894fbaa5dbad943443","modified":1423113979000},{"_id":"themes/pacman/languages/zh-CN.yml","shasum":"19746c626e3d7fc0d1ae1074999cf0512cc6add6","modified":1423113963000},{"_id":"themes/pacman/layout/_partial/google_analytics.ejs","shasum":"b6871f67c87c87acb5295ce4fb673b16a7296a01","modified":1399789754000},{"_id":"themes/pacman/layout/_partial/footer.ejs","shasum":"ab243747592aedb97deaecaec59f40d831a1723e","modified":1399808234000},{"_id":"themes/pacman/layout/_partial/categories.ejs","shasum":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1399789754000},{"_id":"themes/pacman/layout/_partial/article.ejs","shasum":"38837fc6a1a799e83b8a75db642b0daf1ff81828","modified":1399789754000},{"_id":"themes/pacman/layout/_partial/post/article.ejs","shasum":"ec5e8f66886dedf35b9a5746d11fe0dc4a7ab68f","modified":1399789754000},{"_id":"themes/pacman/layout/_partial/header.ejs","shasum":"91e8d3a49ce20d570c7583b05af0e86eab148147","modified":1399789754000},{"_id":"themes/pacman/layout/_partial/pagination.ejs","shasum":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1399789754000},{"_id":"themes/pacman/layout/_partial/head.ejs","shasum":"dde716d2362e012d77bd87c236574109603e9dd8","modified":1399789754000},{"_id":"themes/pacman/layout/_partial/post/comment.ejs","shasum":"5c0afcd1fd1d7b4e8335f76bc181b8e72ffed38e","modified":1399789754000},{"_id":"themes/pacman/layout/_partial/post/gallery.ejs","shasum":"7ca5b1db9439be61a8b77f6f7d857b56fdf1517f","modified":1399789754000},{"_id":"themes/pacman/layout/_partial/post/footer.ejs","shasum":"a9aeae612eb7085bbe74bd12086198320e6c3702","modified":1399789754000},{"_id":"themes/pacman/layout/_partial/post/catetags.ejs","shasum":"f6b107078094333b6567d4a97700f559159675e1","modified":1399789754000},{"_id":"themes/pacman/layout/_partial/post/pagination.ejs","shasum":"dd9563aaa7094c7082a16e6c9cbc24b33aaef87c","modified":1399789754000},{"_id":"themes/pacman/layout/_partial/post/header.ejs","shasum":"73aa8a410cc80277930acaec23003c30eeac6d79","modified":1399789754000},{"_id":"themes/pacman/layout/_partial/search.ejs","shasum":"aed90406246cc43f60dda8cd6558e9eccee342a4","modified":1399789754000},{"_id":"themes/pacman/layout/_partial/post/jiathis.ejs","shasum":"adc047d2bbd031092df86f3be2866ea9c3b5f3c9","modified":1399789754000},{"_id":"themes/pacman/layout/_partial/tags.ejs","shasum":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb","modified":1399908642000},{"_id":"themes/pacman/layout/_widget/category.ejs","shasum":"49e5e423b4defa2189777dd6e8289edc74dbe65e","modified":1401289216000},{"_id":"themes/pacman/layout/_widget/archive.ejs","shasum":"39ea6b7888406fbd1b4cf236ebd718e881493374","modified":1399789754000},{"_id":"themes/pacman/layout/_widget/tagcloud.ejs","shasum":"79627d099b86d72d4bf0df99670414473801f4bd","modified":1401291352000},{"_id":"themes/pacman/layout/archive.ejs","shasum":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1399789754000},{"_id":"themes/pacman/layout/_partial/sidebar.ejs","shasum":"b5aeaab660a18b7a4da568f015e61260eb478916","modified":1423221210000},{"_id":"themes/pacman/layout/index.ejs","shasum":"774f7e89d05e9a9b43970a873d5100ad5c9d21ba","modified":1399789754000},{"_id":"themes/pacman/layout/category.ejs","shasum":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1399789754000},{"_id":"themes/pacman/layout/page.ejs","shasum":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1399789754000},{"_id":"themes/pacman/layout/layout.ejs","shasum":"eb73e8962e5d9a2b325b5fad45de6aa34ee15c56","modified":1423114590000},{"_id":"themes/pacman/package.json","shasum":"00357ef6f24eb049074da81809e98f973f528cca","modified":1423114601000},{"_id":"themes/pacman/layout/post.ejs","shasum":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1399789754000},{"_id":"themes/pacman/layout/tag.ejs","shasum":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1399789754000},{"_id":"themes/pacman/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1399789754000},{"_id":"themes/pacman/source/css/_base/font.styl","shasum":"75f264bc742888dbe192e8d19eda70705d13c709","modified":1399789754000},{"_id":"themes/pacman/source/css/_base/variable.styl","shasum":"d972dcab9aa3948cdd5484d2800388fc3bf799b7","modified":1399796936000},{"_id":"themes/pacman/source/css/_base/public.styl","shasum":"29deec49b60533cc4196175345eaa4b2d611a97e","modified":1399789754000},{"_id":"themes/pacman/source/css/_base/code.styl","shasum":"330209ebaebe69308e131fada85b9b619c85fbd9","modified":1399789754000},{"_id":"themes/pacman/source/css/_partial/aside.styl","shasum":"8fb8c2172883913b404f8e49e181103317486ecc","modified":1399789754000},{"_id":"themes/pacman/source/css/_partial/footer.styl","shasum":"8828365bd3e9ac0da066576b9c55ca6c6374615c","modified":1399809158000},{"_id":"themes/pacman/source/css/_partial/duoshuo.styl","shasum":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1399789754000},{"_id":"themes/pacman/source/css/_partial/article.styl","shasum":"2e3eef7ac830fc704c8f26671a82f806def27dfa","modified":1399789754000},{"_id":"themes/pacman/source/css/_partial/gallery.styl","shasum":"a544a58fdb4c8dd8274159323abd1e38cb03215e","modified":1399789754000},{"_id":"themes/pacman/source/css/_partial/helper.styl","shasum":"52d4ee51b7087c2c2a7e7ded6f63270165d9de89","modified":1399789754000},{"_id":"themes/pacman/source/css/_partial/header.styl","shasum":"d27d0057b86dc61a1ab8a9037ee43dfcc43766b3","modified":1399789754000},{"_id":"themes/pacman/source/css/_partial/index.styl","shasum":"0d219fc6fb76c0d4ffd1dc2a119969d78a157285","modified":1399789754000},{"_id":"themes/pacman/source/css/style.styl","shasum":"b096cc43460e68004bbef41229f67420b5816637","modified":1399789754000},{"_id":"themes/pacman/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1399789754000},{"_id":"themes/pacman/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1399789754000},{"_id":"themes/pacman/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1399789754000},{"_id":"themes/pacman/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1399789754000},{"_id":"themes/pacman/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1399789754000},{"_id":"themes/pacman/layout/_widget/links.ejs","shasum":"48c6b348b70d13ebf4f57e1ad89354fd674e6d43","modified":1401289254000},{"_id":"themes/pacman/layout/_widget/tag.ejs","shasum":"0188304ed82d2ef7de2e70019a851a6c03eda255","modified":1401288192000},{"_id":"themes/pacman/layout/_widget/rss.ejs","shasum":"ae4ce5ef6ae3651abecf371927c5fab48b820342","modified":1401288172000},{"_id":"themes/pacman/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1399789754000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1399789754000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1399789754000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1399789754000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1399789754000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1399789754000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1399789754000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1399789754000},{"_id":"themes/pacman/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1399789754000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1399789754000},{"_id":"themes/pacman/source/font/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1399789754000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.eot","shasum":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1399789754000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.ttf","shasum":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1399789754000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.woff","shasum":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1399789754000},{"_id":"themes/pacman/source/font/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1399789754000},{"_id":"themes/pacman/source/font/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1399789754000},{"_id":"themes/pacman/source/img/logo.svg","shasum":"cef3f0bb4bf3661dd3a58c81b9a7be79601a0bfb","modified":1399789754000},{"_id":"themes/pacman/source/img/pacman.jpg","shasum":"7e873f2f40a52f8c679302b88bb0809a6abafe5c","modified":1399789754000},{"_id":"themes/pacman/source/img/author.jpg","shasum":"734ca345deb441657a589f9fd476ababab972ca3","modified":1373005214000},{"_id":"themes/pacman/source/img/favicon.ico","shasum":"61538a01425ef17ae52685e7252fdb931d7b71c0","modified":1399871278000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.svg","shasum":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1399789754000},{"_id":"themes/pacman/source/font/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1399789754000},{"_id":"themes/pacman/source/js/jquery-2.1.0.min.js","shasum":"98884258cbdb0d939fa2c5e74fc7ac9e56d8170f","modified":1399789754000},{"_id":"themes/pacman/source/font/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1399789754000},{"_id":"public/404.html","modified":1445584154096,"shasum":"bdc5eaf06c43fd725f873bb75e67b5a463a3e995"},{"_id":"public/pay/index.html","modified":1445584154142,"shasum":"e9db390c22be2152020ce5b41d9864ecddd1f1a4"},{"_id":"public/milestone/index.html","modified":1445584154195,"shasum":"b243ebc92e199424de8211fefbdd6f17c4a07e3f"},{"_id":"public/about/index.html","modified":1445584154232,"shasum":"fc6f900ded1272f28812f31ab75c5467307a65e4"},{"_id":"public/2015/10/21/field-65535/index.html","modified":1445584154303,"shasum":"4aa6dfe5199a8d8c7b5e0a97419cf7cba975896f"},{"_id":"public/2015/10/11/android-sdk-mirror/index.html","modified":1445584154343,"shasum":"d92662d8fc28c02ab5b99165968f83e7cbbbc065"},{"_id":"public/2015/10/11/android-studio-plugin-dev/index.html","modified":1445584154404,"shasum":"83cb3bae716cac7f911d5656dee535ff7ec15271"},{"_id":"public/2015/08/07/gradle-android/index.html","modified":1445584154478,"shasum":"581898b4d3ab2f72ddff4c9c19ae0d08501c093a"},{"_id":"public/2015/07/09/slack-android/index.html","modified":1445584154553,"shasum":"76d618e16b8e41b0626f028a9bb64899c0eaf4ca"},{"_id":"public/2015/05/31/Data Binding/index.html","modified":1445584154615,"shasum":"6281fdec89733b5930bdc9381f605a1c08e1f0e2"},{"_id":"public/2015/02/21/mac-application-show-desktop/index.html","modified":1445584154663,"shasum":"1a5a9363ff48b27b62565c02e1f82db0dc80bd37"},{"_id":"public/2015/02/04/ontheway-2014/index.html","modified":1445584154721,"shasum":"ce57648f7b9b6a4f8d4ff59f3f0ae748f69cef68"},{"_id":"public/2015/01/06/memory_leak/index.html","modified":1445584154776,"shasum":"a0f586913bba754eb41de4090c407b6f4cc5b39f"},{"_id":"public/2014/09/16/webview-js-safety/index.html","modified":1445584154819,"shasum":"11637fb35367b7341d879ec53af45de0b38bb1a5"},{"_id":"public/2014/05/24/hack_ttt/index.html","modified":1445584154856,"shasum":"ba6fe4dbbad141978f668ba0c6bf2f5ed9ef6414"},{"_id":"public/2014/05/20/xiaomi_database_leak/index.html","modified":1445584154910,"shasum":"346c22a9ab95fcac4b93abba90100a14f3808384"},{"_id":"public/2014/05/16/hello-world/index.html","modified":1445584154948,"shasum":"debf3a6369e071bb16bb7b8e56a93e29819fcef6"},{"_id":"public/atom.xml","modified":1445584154953,"shasum":"883797c98591e7ea5b11bf9ee76134260e251533"},{"_id":"public/archives/index.html","modified":1445584155001,"shasum":"a3933b73d2c924fb5ea1cd6ab3dfded23ad02fd1"},{"_id":"public/archives/page/2/index.html","modified":1445584155032,"shasum":"a1fc51486ea6af9f6f7720ff7ab707a2d18c8c70"},{"_id":"public/archives/2014/index.html","modified":1445584155071,"shasum":"070574aa123e721bcdeac7369c9d2a1f21bfe4ef"},{"_id":"public/archives/2014/05/index.html","modified":1445584155110,"shasum":"7e7cc20c100a31ea3b651404a0dce694a9c924ef"},{"_id":"public/archives/2014/09/index.html","modified":1445584155131,"shasum":"8eb840e965781d613b590a01787db3e532031960"},{"_id":"public/archives/2015/index.html","modified":1445584155181,"shasum":"796676a8fd60042811c88a0774a3959c58f24ea6"},{"_id":"public/archives/2015/01/index.html","modified":1445584155203,"shasum":"7c675482b973846436330aeb14f4c168ec8b22b7"},{"_id":"public/archives/2015/02/index.html","modified":1445584155233,"shasum":"340daa8ce231cc9848aec24243d538824ec0f954"},{"_id":"public/archives/2015/05/index.html","modified":1445584155253,"shasum":"cdac6837ca48c9c849a31be06d78bf20e3c23f0a"},{"_id":"public/archives/2015/07/index.html","modified":1445584155274,"shasum":"c2a29cf34c0f51a80d3aa2706c9f744c5ed51914"},{"_id":"public/archives/2015/08/index.html","modified":1445584155308,"shasum":"fef9ed9049c8ceb6a0b74a3ea8065c2bb613d4c4"},{"_id":"public/archives/2015/10/index.html","modified":1445584155336,"shasum":"12ade345725ecf51e735af2756d61b641dcb2716"},{"_id":"public/index.html","modified":1445584155399,"shasum":"7c6adcac4a24c311923069ca19d2fcc3d9c9ed86"},{"_id":"public/page/2/index.html","modified":1445584155437,"shasum":"2a4ec7bd3ef720812e370e028f24dc5112966c07"},{"_id":"public/tags/小米/index.html","modified":1445584155462,"shasum":"f52d7cd235320d224f9ce98a894c9eb875cfde50"},{"_id":"public/tags/数据库/index.html","modified":1445584155484,"shasum":"fe60292bb07baafb7c8ed8e6f36ccc502d486cd0"},{"_id":"public/tags/Web安全/index.html","modified":1445584155526,"shasum":"1e2bf25c0881f94e86902e33284e841a1d70cc2a"},{"_id":"public/tags/创业/index.html","modified":1445584155561,"shasum":"1be9235f0568b902e963f2ea2ed2dfa42c427bf2"},{"_id":"public/tags/webview/index.html","modified":1445584155583,"shasum":"3de4ff708b19d33d4eb2491ff302f1b316a37d64"},{"_id":"public/tags/Android/index.html","modified":1445584155652,"shasum":"15951455e74965f81a25ba869d27d58b65613535"},{"_id":"public/tags/Javascript/index.html","modified":1445584155664,"shasum":"253819202dff464ea1b7cc0532e448e125cab0db"},{"_id":"public/tags/安全/index.html","modified":1445584155672,"shasum":"28f2ba67efb73bb58ed0c7a0c5a03e38d027d69a"},{"_id":"public/tags/Slack/index.html","modified":1445584155677,"shasum":"ace3e3dc4c00207261c7a46fea3215703e6fa8b3"},{"_id":"public/tags/有态度/index.html","modified":1445584155680,"shasum":"69d1c02439c4b68dbb98bf0c6edfaebdb7e9e43a"},{"_id":"public/tags/总结/index.html","modified":1445584155684,"shasum":"8ff5505507acdd03df6ed68d3f26797ac8444101"},{"_id":"public/tags/实习/index.html","modified":1445584155688,"shasum":"0437be87e0e72ec143c2f04c8db47ffeac9d9710"},{"_id":"public/tags/工作/index.html","modified":1445584155693,"shasum":"fbfff631c772d577f655288bf8025678bed61689"},{"_id":"public/tags/百度/index.html","modified":1445584155696,"shasum":"223f58d9f4cd9e5548cb848ef9b683da068ecbcd"},{"_id":"public/tags/大众点评/index.html","modified":1445584155702,"shasum":"07b5c566306314e567e7599ddde77011f70857b1"},{"_id":"public/tags/产品/index.html","modified":1445584155707,"shasum":"4b46264919e92b0021588f000c3e750a104b372c"},{"_id":"public/tags/校招/index.html","modified":1445584155712,"shasum":"6235209b5baad2a1991a9444cfee7a9af33e4428"},{"_id":"public/tags/offer/index.html","modified":1445584155717,"shasum":"633f7325073954b86d70acc96b981c63293e6ea0"},{"_id":"public/tags/内存泄露/index.html","modified":1445584155723,"shasum":"2871c42cf39d50352d3b496024689801bef6af4c"},{"_id":"public/tags/Java/index.html","modified":1445584155731,"shasum":"5745af28f57344e904c3f46758538e6fb3d3b92b"},{"_id":"public/tags/MAT/index.html","modified":1445584155737,"shasum":"8276927fd87dde013a786b07e6dd3b37c2b0c41f"},{"_id":"public/tags/mac开发/index.html","modified":1445584155741,"shasum":"03aa09a1ac72f85812577d3bbcccee704600a553"},{"_id":"public/tags/显示桌面/index.html","modified":1445584155746,"shasum":"9ab640fcebad404d2faf86e4431d97bffb5e6d2d"},{"_id":"public/tags/开机启动/index.html","modified":1445584155750,"shasum":"004cdc1942b3f981ca6a5aada3297de2d6c04bfe"},{"_id":"public/tags/状态栏/index.html","modified":1445584155755,"shasum":"38d1eda1f54eb08e7bf6c498930c943407694667"},{"_id":"public/tags/快捷键/index.html","modified":1445584155759,"shasum":"3c265e12b835264ec87e0f2839541c088a135f2a"},{"_id":"public/tags/开篇/index.html","modified":1445584155762,"shasum":"90ec3c99434a795d285ed5b90f480dca914ae402"},{"_id":"public/tags/锤子科技/index.html","modified":1445584155766,"shasum":"88b5eafa6ce3de8d75dbeb88f94017b01dabc73b"},{"_id":"public/tags/撞库/index.html","modified":1445584155769,"shasum":"b95a5d4772fb21e534339b6d0058846458c952da"},{"_id":"public/tags/Android-Studio/index.html","modified":1445584155782,"shasum":"1c363313f50cd8319a1516c793844aa0d8f0540f"},{"_id":"public/tags/Gradle/index.html","modified":1445584155785,"shasum":"91d3aff18059a2ddb247a28faaf64c8625a7f28d"},{"_id":"public/tags/Groovy/index.html","modified":1445584155787,"shasum":"9f77aa65f1f0280bffa7698abb56e23cd6c09fe6"},{"_id":"public/tags/65k/index.html","modified":1445584155794,"shasum":"671a4091669675d93faaf7b21d3560210d639099"},{"_id":"public/tags/65535/index.html","modified":1445584155799,"shasum":"e354f7a5225b48b4f9f153a90f224b3f341871ef"},{"_id":"public/tags/android/index.html","modified":1445584155802,"shasum":"24df3f9bd625aaff69c9e500ad85425ac9729b4a"},{"_id":"public/tags/buck/index.html","modified":1445584155807,"shasum":"b1c4f2cee90cc8ff571b2e4bb809d5226e907055"},{"_id":"public/tags/gradle/index.html","modified":1445584155811,"shasum":"38cfe702bfc0d675bee24e9ddad253a66448c6f1"},{"_id":"public/tags/field/index.html","modified":1445584155814,"shasum":"dff9c40e0e1ff44d9dfae890d40b782ba7a2f3d8"},{"_id":"public/tags/Dalvik/index.html","modified":1445584155819,"shasum":"dfa4237194443a6cb65853c3d7357eff41b9aaea"},{"_id":"public/tags/插件/index.html","modified":1445584155823,"shasum":"297f85ca5a18d4c26767b1679947622bdfd75149"},{"_id":"public/tags/IntelliJ-IDEA/index.html","modified":1445584155827,"shasum":"5b064c0f07f5c693170ed30b832410e1c16f82bb"},{"_id":"public/tags/Android-SDk/index.html","modified":1445584155831,"shasum":"af37ff04c72f9d47df643a6caf0c51ca782b541a"},{"_id":"public/tags/镜像/index.html","modified":1445584155838,"shasum":"72c51a47aa8ffa366898bf08c503fe0ac65c4e38"},{"_id":"public/tags/nginx/index.html","modified":1445584155841,"shasum":"6d0640c83add11e856e544a7ecac09d691da97b8"},{"_id":"public/tags/Data-Binding/index.html","modified":1445584155850,"shasum":"5b3251dd4d867e6ce52730e99a554fe895b326ec"},{"_id":"public/tags/Google-IO/index.html","modified":1445584155855,"shasum":"5d3a5dd383a2ebfa000861bdbc81838e25310e3b"},{"_id":"public/tags/MVVM/index.html","modified":1445584155859,"shasum":"3954dfa49d00939b4bf0244a045760fdefa6e664"}],"Category":[],"Data":[],"Page":[{"_content":"\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<p style=\"text-align: center;\">\n    <span style=\"color:#0070c0;font-size:160px;font-family:impact, chicago\">404</span>\n</p>\n<p style=\"text-align: center;\">\n    <span style=\"font-size: 25px;\">您访问的页面，一如那些年爱过的女孩，已离我们远去。</span><br/>\n</p>\n","source":"404.html","raw":"\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<p style=\"text-align: center;\">\n    <span style=\"color:#0070c0;font-size:160px;font-family:impact, chicago\">404</span>\n</p>\n<p style=\"text-align: center;\">\n    <span style=\"font-size: 25px;\">您访问的页面，一如那些年爱过的女孩，已离我们远去。</span><br/>\n</p>\n","date":"2015-07-14T10:01:36.000Z","updated":"2014-05-12T02:38:24.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cig3bgcky0000x5ub7697zo5q"},{"title":"打赏","date":"2015-10-22T07:38:57.000Z","_content":"\n有些人说很喜欢我的博客，我觉得他们说的很有道理，让我无言以对。\n\n啥都别说了，喜欢就是放肆，尽情打赏吧。\n\n![微信](http://7fviov.com1.z0.glb.clouddn.com/1.pic_hd.jpg?imageView2/0/w/350/h/350) ![支付宝](http://7fviov.com1.z0.glb.clouddn.com/2.pic_hd.jpg?imageView2/0/w/350/h/350)\n\n姓名 | 金额\n----|------|----\n[张会超](http://www.weibo.com/234959219) | 10.24\n","source":"pay/index.md","raw":"title: 打赏\ndate: 2015-10-22 15:38:57\n---\n\n有些人说很喜欢我的博客，我觉得他们说的很有道理，让我无言以对。\n\n啥都别说了，喜欢就是放肆，尽情打赏吧。\n\n![微信](http://7fviov.com1.z0.glb.clouddn.com/1.pic_hd.jpg?imageView2/0/w/350/h/350) ![支付宝](http://7fviov.com1.z0.glb.clouddn.com/2.pic_hd.jpg?imageView2/0/w/350/h/350)\n\n姓名 | 金额\n----|------|----\n[张会超](http://www.weibo.com/234959219) | 10.24\n","updated":"2015-10-23T07:08:20.000Z","path":"pay/index.html","comments":1,"layout":"page","_id":"cig3bgcls0001x5ub9df3auef"},{"title":"大事记","date":"2015-02-25T06:45:17.000Z","_content":"\n\n* 山东大学计算机(2009年-2013年)\n\t* 大一 通宵一周，独立完成课程设计网络黑白棋项目，第一份作品，从无到有，很有成就感。\n\t* 大二 加入山东大学搏创实验室，认识了一些牛人，没干什么事；微博刚兴起的时候用Java写了个[新浪微博Linux客户端](http://fmn.xnpic.com/fmn052/20110620/2000/p_large_YF8E_51e700012e7f5c74.jpg)，可以阅读和发微博；顺手写了个[查普通话成绩的客户端](http://fmn.xnpic.com/fmn056/20120517/2335/original_Asy8_17d200000166118e.jpg)；Android刚兴起的时候，写了个微博转发有奖的应用，半成品；买了个[域名](http://fmn.xnpic.com/fmn052/20101206/1935/p_large_TCQV_6711000abb025c43.jpg)，写了个博客。\n\t* 大三 写了个[图书馆管理系统](http://fmn.rrimg.com/fmn063/20111122/2000/p_large_CiVa_111c0003443e1260.jpg)；拿到驾照，回到单身；写了个[山大软件FaceMash Demo](http://fmn.rrimg.com/fmn064/20120720/0915/large_Lqqu_46000000115b118c.jpg)；暑假参加软件服务外包创新创业大赛，团队三等奖。\n\t* 大四 准备考研的时候，写了个微信翻译助手，查单词用，当时有道词典还很丑；毕业设计写了个渲染农场Android客户端。\n\t\n* 浙江大学软件工程(2013年-2015年）\n\t* 研一 在[牛扣公司](http://www.nnkou.com)实习，Android负责人，同时完成服务器端银联商务接口对接；给[天瑞医疗](http://www.tr24h.com/) 做了个无线血压计的项目。\n\t* 研二 在[大众点评](http://www.dianping.com)实习，Android研发，实习期间，参加极客马拉松，获得[团队三等奖](http://wenda60.com/static/dp/top.htm)，并最终获得校招Special Offer；创建本博客，[流量](http://jiajixin.cn/2015/02/04/ontheway-2014/#博客)不错；在乌云提交不少[漏洞](http://wooyun.org/whitehats/%E5%AF%92%E6%B1%9F%E4%B8%8D%E9%92%93)，获得不少礼物。构思产品[云影](http://jiajixin.cn/2015/02/04/ontheway-2014/#产品)，半成品；获得百度校招Offer，转做iOS开发。\n\n\t\n","source":"milestone/index.md","raw":"---\ntitle: 大事记\ndate: 2015-02-25 14:45:17\n---\n\n\n* 山东大学计算机(2009年-2013年)\n\t* 大一 通宵一周，独立完成课程设计网络黑白棋项目，第一份作品，从无到有，很有成就感。\n\t* 大二 加入山东大学搏创实验室，认识了一些牛人，没干什么事；微博刚兴起的时候用Java写了个[新浪微博Linux客户端](http://fmn.xnpic.com/fmn052/20110620/2000/p_large_YF8E_51e700012e7f5c74.jpg)，可以阅读和发微博；顺手写了个[查普通话成绩的客户端](http://fmn.xnpic.com/fmn056/20120517/2335/original_Asy8_17d200000166118e.jpg)；Android刚兴起的时候，写了个微博转发有奖的应用，半成品；买了个[域名](http://fmn.xnpic.com/fmn052/20101206/1935/p_large_TCQV_6711000abb025c43.jpg)，写了个博客。\n\t* 大三 写了个[图书馆管理系统](http://fmn.rrimg.com/fmn063/20111122/2000/p_large_CiVa_111c0003443e1260.jpg)；拿到驾照，回到单身；写了个[山大软件FaceMash Demo](http://fmn.rrimg.com/fmn064/20120720/0915/large_Lqqu_46000000115b118c.jpg)；暑假参加软件服务外包创新创业大赛，团队三等奖。\n\t* 大四 准备考研的时候，写了个微信翻译助手，查单词用，当时有道词典还很丑；毕业设计写了个渲染农场Android客户端。\n\t\n* 浙江大学软件工程(2013年-2015年）\n\t* 研一 在[牛扣公司](http://www.nnkou.com)实习，Android负责人，同时完成服务器端银联商务接口对接；给[天瑞医疗](http://www.tr24h.com/) 做了个无线血压计的项目。\n\t* 研二 在[大众点评](http://www.dianping.com)实习，Android研发，实习期间，参加极客马拉松，获得[团队三等奖](http://wenda60.com/static/dp/top.htm)，并最终获得校招Special Offer；创建本博客，[流量](http://jiajixin.cn/2015/02/04/ontheway-2014/#博客)不错；在乌云提交不少[漏洞](http://wooyun.org/whitehats/%E5%AF%92%E6%B1%9F%E4%B8%8D%E9%92%93)，获得不少礼物。构思产品[云影](http://jiajixin.cn/2015/02/04/ontheway-2014/#产品)，半成品；获得百度校招Offer，转做iOS开发。\n\n\t\n","updated":"2015-02-26T09:37:11.000Z","path":"milestone/index.html","comments":1,"layout":"page","_id":"cig3bgclu0002x5ub4w6etdf1"},{"title":"贾吉鑫","date":"2014-05-12T12:55:16.000Z","tags":null,"_content":"\n山东90后，男。\n现居上海，就职于大众点评，热爱移动开发。\n\n>QQ：402028248\n>微博：[@寒江不钓](http://weibo.com/402028248)\n\n\n","source":"about/index.md","raw":"---\ntitle: 贾吉鑫\ndate: 2014-05-12 20:55:16\ntags: \n---\n\n山东90后，男。\n现居上海，就职于大众点评，热爱移动开发。\n\n>QQ：402028248\n>微博：[@寒江不钓](http://weibo.com/402028248)\n\n\n","updated":"2015-10-06T13:57:09.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cig3bgclv0003x5ubrh62iwkd"}],"Post":[{"title":"小米被脱裤那点事儿","date":"2014-05-19T16:16:16.000Z","_content":"\n几天前，网络开始疯传小米被脱裤，我是第二天才知道消息的，在[乌云](http://wooyun.org)评论里看到[西域论坛](http://bbs.xiyv.net/)，去看了下竟然有数据库的百度网盘链接，下载后发现是三个文件，分别是xiaomi_com.MYI,xiaomi_com.MYD,xiaomi_com.frm,查了下资料:\n>frm、MYI、MYD 分别是 MyISAM 表的表结构\\索引\\数据文件\n\n花了点时间导入本地数据库。小米论坛之前采用的是Discuz系统，密码都是加盐哈希存储的，很难破解，[CMD5](http://www.cmd5.com/)这个网站挺牛逼的，能反向破解很多密码，但是收费，以为这份数据库没啥价值，也就没怎么管。晚上突然想到即使加盐，也可以去尝试用弱口令比对的方法，即用最常用的123456等弱密码加盐哈希后去和数据库里的值进行比较。第一次用Python写了脚本，的确很方便，之前用Java连接数据库都要弄个驱动。出乎意料的是123456这种密码竟然有30300个用户，能登录成功的都没有开启小米云服务，有些则是登录失败，估计这部分才是云服务用户，被小米锁定账号了，要是提前一天分析出这些密码，估计很多用户隐私就可以看到了。\n\n#代码\n\nPython写了个脚本，进行密码分析，弱口令来源是社会工程学联盟统计的2013年常用弱口令TOP26，互联网上泄露的密码已经数以亿计，我知道不少人手里整理了这些数据，随手查个邮箱用户名的密码轻而易举，很大的几率碰撞能登录其他网站，这他妈才是大数据。下面亮出脚本代码吧，第一次写，纯属现学现用。\n\n```\n#!/usr/bin/env python\n#coding=utf-8\nimport sys\nimport MySQLdb\nimport MySQLdb.cursors\nimport re\nimport md5\nimport os\n\npwdList=['123456','123456789','111111','123123','12345678','a123456','000000','5201314','11111111','wodima123','a123456789','zxcvbnm','123456a','123321','qq123456','woaini1314','123456789a','passport','1234567890','1314520','abc123456','123123123','1234567','7758521','666666','woaini']\nconn=MySQLdb.connect(host='localhost',user='root',passwd='900608',cursorclass=MySQLdb.cursors.SSCursor)\ncursor=conn.cursor()\n\nconn.select_db('xiaomi')\ncursor.execute('select * from xiaomi_com')\n\nrow=cursor.fetchone()\ndict={}\n\nwhile row is not None:\n\tpassword=row[2]\n\tlist=re.split(':',password)\n \tmd5pwd=list[0]\n\tsalt=''\n\tif len(list)>1:\n\t\tsalt=list[1]\n\tfor ipwd in  pwdList:\n\t\tm=md5.new(ipwd)\n\t\tm.digest()\n\t\tm1=md5.new(m.hexdigest()+salt)\n\t\tm1.digest()\n\t\tpwd=m1.hexdigest()\n\t\tif pwd==md5pwd:\n\t\t\tdict[ipwd]=dict.get(ipwd,0)+1\n\t\t\tprint row[3],ipwd\n\t\t\tbreak\n\trow=cursor.fetchone()\ncursor.close()\nconn.close()\nfor i in dict:\n\tprint \"dict[%s]=\"% i,dict[i]\n```\n下面是代码运行部分结果，统计了26个密码的使用人数，应该有8万左右吧，还是挺多的。\n\n![数据分析结果](http://jiajixin.qiniudn.com/xiaomi_database_ana.png)\n\n#安全\n\n我是从去年开始关注网络安全的，在微博和网络上看了点相关知识。后来一个女同学过生日，想给她一份别致的礼物----在学院官网上祝她生日快乐，看了看网站，感觉有个地方应该可以XSS注入代码，开个服务器等了三天三夜，终于等到管理员上线拿到了她的cookie，发了篇生日快乐的文章，怕出事，很快又改回来了。后来那个女同学送了我块肥皂，更搞笑的是肥皂被我舍友要去，然后不知道送给谁了。\n\n年初的时候，余弦@知道创宇在微信招聘，我顺手发了个简历，很快就收到他的回复，也有空和业内大名鼎鼎的黑哥在QQ上聊了一会，那边基本上是给了开发的offer，由于各种原因没去，但却开始更加关注Web安全。知道创宇的这一票人，在Web安全领域做的还是挺不错的，今年信息安全发生了很多大事，OpenSSL心血漏洞事件、路由器安全、摄像头安全，这些事件背后都能看到他们的身影，这是一群牛逼的人，希望他们越做越好吧。\n\n有人说今年是信息安全元年，行业变化很大，发生了很多事情。这不到一年的时间，我是越来越意识到Web安全的重要性，BAT这样的大公司对安全还是挺重视的，但太多的创业公司意识薄弱，小公司基本不了解Web安全，连小米这样的中型创业公司也被爆料对白帽不友好。大多数都是吃一堑长一智，跌了跟头才开始意识到安全的重要性。不光公司，很多程序员基本上都不了解Web安全，很多学校没有相关课程，有的也是乏味的密码学基础知识介绍，更不要说那些教授纸上谈兵，根本不懂入侵了。希望未来高校能有Web安全这门课，有个牛逼的黑客导师，我觉得很多学生还是有兴趣的，这个可能高校和企业合作比较好。\n\n不想当黑客的程序员不是好程序员，很多人进入计算机行业的时候都有成为黑客这样的想法吧，只是后来渐行渐远。锤子便签的图标上有一句话，\n>不要因为走得太远就忘了当初为什么出发\n\n是啊，下周二锤子手机发布会优酷直播，真心期待老罗带来精彩。\n\n","source":"_posts/xiaomi_database_leak.md","raw":"title: 小米被脱裤那点事儿\ndate: 2014-05-20 0:16:16\ntags: [小米,数据库,Web安全,创业]\n---\n\n几天前，网络开始疯传小米被脱裤，我是第二天才知道消息的，在[乌云](http://wooyun.org)评论里看到[西域论坛](http://bbs.xiyv.net/)，去看了下竟然有数据库的百度网盘链接，下载后发现是三个文件，分别是xiaomi_com.MYI,xiaomi_com.MYD,xiaomi_com.frm,查了下资料:\n>frm、MYI、MYD 分别是 MyISAM 表的表结构\\索引\\数据文件\n\n花了点时间导入本地数据库。小米论坛之前采用的是Discuz系统，密码都是加盐哈希存储的，很难破解，[CMD5](http://www.cmd5.com/)这个网站挺牛逼的，能反向破解很多密码，但是收费，以为这份数据库没啥价值，也就没怎么管。晚上突然想到即使加盐，也可以去尝试用弱口令比对的方法，即用最常用的123456等弱密码加盐哈希后去和数据库里的值进行比较。第一次用Python写了脚本，的确很方便，之前用Java连接数据库都要弄个驱动。出乎意料的是123456这种密码竟然有30300个用户，能登录成功的都没有开启小米云服务，有些则是登录失败，估计这部分才是云服务用户，被小米锁定账号了，要是提前一天分析出这些密码，估计很多用户隐私就可以看到了。\n\n#代码\n\nPython写了个脚本，进行密码分析，弱口令来源是社会工程学联盟统计的2013年常用弱口令TOP26，互联网上泄露的密码已经数以亿计，我知道不少人手里整理了这些数据，随手查个邮箱用户名的密码轻而易举，很大的几率碰撞能登录其他网站，这他妈才是大数据。下面亮出脚本代码吧，第一次写，纯属现学现用。\n\n```\n#!/usr/bin/env python\n#coding=utf-8\nimport sys\nimport MySQLdb\nimport MySQLdb.cursors\nimport re\nimport md5\nimport os\n\npwdList=['123456','123456789','111111','123123','12345678','a123456','000000','5201314','11111111','wodima123','a123456789','zxcvbnm','123456a','123321','qq123456','woaini1314','123456789a','passport','1234567890','1314520','abc123456','123123123','1234567','7758521','666666','woaini']\nconn=MySQLdb.connect(host='localhost',user='root',passwd='900608',cursorclass=MySQLdb.cursors.SSCursor)\ncursor=conn.cursor()\n\nconn.select_db('xiaomi')\ncursor.execute('select * from xiaomi_com')\n\nrow=cursor.fetchone()\ndict={}\n\nwhile row is not None:\n\tpassword=row[2]\n\tlist=re.split(':',password)\n \tmd5pwd=list[0]\n\tsalt=''\n\tif len(list)>1:\n\t\tsalt=list[1]\n\tfor ipwd in  pwdList:\n\t\tm=md5.new(ipwd)\n\t\tm.digest()\n\t\tm1=md5.new(m.hexdigest()+salt)\n\t\tm1.digest()\n\t\tpwd=m1.hexdigest()\n\t\tif pwd==md5pwd:\n\t\t\tdict[ipwd]=dict.get(ipwd,0)+1\n\t\t\tprint row[3],ipwd\n\t\t\tbreak\n\trow=cursor.fetchone()\ncursor.close()\nconn.close()\nfor i in dict:\n\tprint \"dict[%s]=\"% i,dict[i]\n```\n下面是代码运行部分结果，统计了26个密码的使用人数，应该有8万左右吧，还是挺多的。\n\n![数据分析结果](http://jiajixin.qiniudn.com/xiaomi_database_ana.png)\n\n#安全\n\n我是从去年开始关注网络安全的，在微博和网络上看了点相关知识。后来一个女同学过生日，想给她一份别致的礼物----在学院官网上祝她生日快乐，看了看网站，感觉有个地方应该可以XSS注入代码，开个服务器等了三天三夜，终于等到管理员上线拿到了她的cookie，发了篇生日快乐的文章，怕出事，很快又改回来了。后来那个女同学送了我块肥皂，更搞笑的是肥皂被我舍友要去，然后不知道送给谁了。\n\n年初的时候，余弦@知道创宇在微信招聘，我顺手发了个简历，很快就收到他的回复，也有空和业内大名鼎鼎的黑哥在QQ上聊了一会，那边基本上是给了开发的offer，由于各种原因没去，但却开始更加关注Web安全。知道创宇的这一票人，在Web安全领域做的还是挺不错的，今年信息安全发生了很多大事，OpenSSL心血漏洞事件、路由器安全、摄像头安全，这些事件背后都能看到他们的身影，这是一群牛逼的人，希望他们越做越好吧。\n\n有人说今年是信息安全元年，行业变化很大，发生了很多事情。这不到一年的时间，我是越来越意识到Web安全的重要性，BAT这样的大公司对安全还是挺重视的，但太多的创业公司意识薄弱，小公司基本不了解Web安全，连小米这样的中型创业公司也被爆料对白帽不友好。大多数都是吃一堑长一智，跌了跟头才开始意识到安全的重要性。不光公司，很多程序员基本上都不了解Web安全，很多学校没有相关课程，有的也是乏味的密码学基础知识介绍，更不要说那些教授纸上谈兵，根本不懂入侵了。希望未来高校能有Web安全这门课，有个牛逼的黑客导师，我觉得很多学生还是有兴趣的，这个可能高校和企业合作比较好。\n\n不想当黑客的程序员不是好程序员，很多人进入计算机行业的时候都有成为黑客这样的想法吧，只是后来渐行渐远。锤子便签的图标上有一句话，\n>不要因为走得太远就忘了当初为什么出发\n\n是啊，下周二锤子手机发布会优酷直播，真心期待老罗带来精彩。\n\n","slug":"xiaomi_database_leak","published":1,"updated":"2014-09-16T15:31:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cig3bgcly0004x5ub1tx13td4"},{"title":"Android Webview Java和Javascript安全交互","date":"2014-09-16T15:25:18.000Z","_content":"\n最近要对一个网页的源代码进行检测，Android Webview中没有直接获取网页源代码的接口，传统的`addJavascriptInterface`方法存在安全隐患，所以研究了一下Java和Javascript的安全交互。\n\n##Android Webview漏洞\nAndroid Webview有两个非常知名的漏洞:\n\n - 最近爆出来的UXSS漏洞，可以越过同源策略，获得任意网页的Cookie等信息，Android 4.4以下都有此问题，基本无解，只能重新编译浏览器内核解决，详情可以参考[最近移动安全三两事][1]，感兴趣的可以去看一下[@RAyH4c][2]劫持微博、QQ空间的视频。\n - 成名已久的任意命令执行漏洞，通过`addJavascriptInterface`方法，Js可以调用Java对象方法，通过反射机制，Js可以直接获取Runtime，从而执行任意命令。Android 4.2以上，可以通过声明`@JavascriptInterface`保证安全性，4.2以下不能再调用`addJavascriptInterface`，需要另谋他法。\n\n##Java和Javascript安全交互\n首先要说明几点：\n\n1.Android Webview中Java调用Js方法很容易，`loadUrl(\"javascript:isOk()\")`就可以调用isOk这个Js方法，但不能直接获取Js方法的返回结果。\n2.传统的方法中，Js获取Java信息可以采用如下方式：\n\n     class JsObject {\n           @JavascriptInterface\n           public String toString() { return \"injectedObject\"; }\n        }\n        webView.addJavascriptInterface(new JsObject(), \"injectedObject\");\n        webView.loadData(\"\", \"text/html\", null);\n        webView.loadUrl(\"javascript:alert(injectedObject.toString())\");\n\n Java获取Js信息（如通过Js获取网页源代码）可以这样：\n\n    import android.app.Activity;\n    import android.graphics.Bitmap;\n    import android.os.Bundle;\n    import android.util.Log;\n    import android.webkit.WebView;\n    import android.webkit.WebViewClient;\n         \n    public class HtmlSource extends Activity {\n        private WebView webView;\n        \n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);\n            webView = (WebView)findViewById(R.id.webview);\n            webView.getSettings().setJavaScriptEnabled(true);\n            webView.addJavascriptInterface(new InJavaScriptLocalObj(), \"local_obj\");\n            webView.setWebViewClient(new MyWebViewClient());\n            webView.loadUrl(\"http://www.cnblogs.com/hibraincol/\");\n        }\n         \n         \n       final class MyWebViewClient extends WebViewClient{  \n            public boolean shouldOverrideUrlLoading(WebView view, String url) {   \n                view.loadUrl(url);   \n                return true;   \n            }  \n            public void onPageStarted(WebView view, String url, Bitmap favicon) {\n                Log.d(\"WebView\",\"onPageStarted\");\n                super.onPageStarted(view, url, favicon);\n            }    \n            public void onPageFinished(WebView view, String url) {\n                Log.d(\"WebView\",\"onPageFinished \");\n                view.loadUrl(\"javascript:window.local_obj.showSource('<head>'+\" +\n                    \"document.getElementsByTagName('html')[0].innerHTML+'</head>');\");\n                super.onPageFinished(view, url);\n            }\n        }\n         \n        final class InJavaScriptLocalObj {\n            \n            public void showSource(String html) {\n                Log.d(\"HTML\", html);\n            }\n        }\n    }\n\n3.当网页中有超链接跳转时，将会调用WebClient的`shouldOverrideUrlLoading`方法，若设置 WebViewClient 且该方法返回 true，则说明由应用的代码处理该 url，WebView 不处理，就可以达到拦截跳转的效果。\n\n明白了上面几点，我们可以总结出一个比较安全的Java和Js交互方式：\n> 可以借鉴Android Intent的思路，Java和Js定义一个url格式如`js://_`,Java调用Js方法，在Js方法中通过`window.location.href='js://_?key=value#key1=value1'`模拟跳转，被Java的`shouldOverrideUrlLoading`捕获，函数的返回值可以放在url的参数中。（Js调用Java方法原理相同）\n这样的交互方式是异步的，如果你想知道调用一个Js方法是否返回了值怎么办？一般Java调用Js方法是在`onPageFinished`方法中，获得Js返回值是在`shouldOverrideUrlLoading`方法中，两个方法有个共同的参数webview,所以可以首先`webview.setTag(false)`，如果捕获到返回结果，则`webview.setTag(true)`,postDelayed在很短时间比如300毫秒后，`webview.getTag()`检查是否有变化即可。\n\n  [1]: http://zhuanlan.zhihu.com/fooying/19840752\n  [2]: http://weibo.com/rayh4c\n","source":"_posts/webview-js-safety.md","raw":"title: Android Webview Java和Javascript安全交互\ndate: 2014-09-16 23:25:18\ntags: [webview,Android,Javascript,安全]\n---\n\n最近要对一个网页的源代码进行检测，Android Webview中没有直接获取网页源代码的接口，传统的`addJavascriptInterface`方法存在安全隐患，所以研究了一下Java和Javascript的安全交互。\n\n##Android Webview漏洞\nAndroid Webview有两个非常知名的漏洞:\n\n - 最近爆出来的UXSS漏洞，可以越过同源策略，获得任意网页的Cookie等信息，Android 4.4以下都有此问题，基本无解，只能重新编译浏览器内核解决，详情可以参考[最近移动安全三两事][1]，感兴趣的可以去看一下[@RAyH4c][2]劫持微博、QQ空间的视频。\n - 成名已久的任意命令执行漏洞，通过`addJavascriptInterface`方法，Js可以调用Java对象方法，通过反射机制，Js可以直接获取Runtime，从而执行任意命令。Android 4.2以上，可以通过声明`@JavascriptInterface`保证安全性，4.2以下不能再调用`addJavascriptInterface`，需要另谋他法。\n\n##Java和Javascript安全交互\n首先要说明几点：\n\n1.Android Webview中Java调用Js方法很容易，`loadUrl(\"javascript:isOk()\")`就可以调用isOk这个Js方法，但不能直接获取Js方法的返回结果。\n2.传统的方法中，Js获取Java信息可以采用如下方式：\n\n     class JsObject {\n           @JavascriptInterface\n           public String toString() { return \"injectedObject\"; }\n        }\n        webView.addJavascriptInterface(new JsObject(), \"injectedObject\");\n        webView.loadData(\"\", \"text/html\", null);\n        webView.loadUrl(\"javascript:alert(injectedObject.toString())\");\n\n Java获取Js信息（如通过Js获取网页源代码）可以这样：\n\n    import android.app.Activity;\n    import android.graphics.Bitmap;\n    import android.os.Bundle;\n    import android.util.Log;\n    import android.webkit.WebView;\n    import android.webkit.WebViewClient;\n         \n    public class HtmlSource extends Activity {\n        private WebView webView;\n        \n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);\n            webView = (WebView)findViewById(R.id.webview);\n            webView.getSettings().setJavaScriptEnabled(true);\n            webView.addJavascriptInterface(new InJavaScriptLocalObj(), \"local_obj\");\n            webView.setWebViewClient(new MyWebViewClient());\n            webView.loadUrl(\"http://www.cnblogs.com/hibraincol/\");\n        }\n         \n         \n       final class MyWebViewClient extends WebViewClient{  \n            public boolean shouldOverrideUrlLoading(WebView view, String url) {   \n                view.loadUrl(url);   \n                return true;   \n            }  \n            public void onPageStarted(WebView view, String url, Bitmap favicon) {\n                Log.d(\"WebView\",\"onPageStarted\");\n                super.onPageStarted(view, url, favicon);\n            }    \n            public void onPageFinished(WebView view, String url) {\n                Log.d(\"WebView\",\"onPageFinished \");\n                view.loadUrl(\"javascript:window.local_obj.showSource('<head>'+\" +\n                    \"document.getElementsByTagName('html')[0].innerHTML+'</head>');\");\n                super.onPageFinished(view, url);\n            }\n        }\n         \n        final class InJavaScriptLocalObj {\n            \n            public void showSource(String html) {\n                Log.d(\"HTML\", html);\n            }\n        }\n    }\n\n3.当网页中有超链接跳转时，将会调用WebClient的`shouldOverrideUrlLoading`方法，若设置 WebViewClient 且该方法返回 true，则说明由应用的代码处理该 url，WebView 不处理，就可以达到拦截跳转的效果。\n\n明白了上面几点，我们可以总结出一个比较安全的Java和Js交互方式：\n> 可以借鉴Android Intent的思路，Java和Js定义一个url格式如`js://_`,Java调用Js方法，在Js方法中通过`window.location.href='js://_?key=value#key1=value1'`模拟跳转，被Java的`shouldOverrideUrlLoading`捕获，函数的返回值可以放在url的参数中。（Js调用Java方法原理相同）\n这样的交互方式是异步的，如果你想知道调用一个Js方法是否返回了值怎么办？一般Java调用Js方法是在`onPageFinished`方法中，获得Js返回值是在`shouldOverrideUrlLoading`方法中，两个方法有个共同的参数webview,所以可以首先`webview.setTag(false)`，如果捕获到返回结果，则`webview.setTag(true)`,postDelayed在很短时间比如300毫秒后，`webview.getTag()`检查是否有变化即可。\n\n  [1]: http://zhuanlan.zhihu.com/fooying/19840752\n  [2]: http://weibo.com/rayh4c\n","slug":"webview-js-safety","published":1,"updated":"2014-09-16T15:29:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cig3bgcm7000dx5ub1cwf3ygk"},{"title":"有态度的Slack群组","date":"2015-07-09T05:02:14.000Z","_content":"\n我要建立一个有态度的Slack群组，服务有态度的Android开发者。\n\n## 是什么？\n今年，机缘巧合中，加入了一个比较Geek的创业公司，团队沟通一直使用Slack这个工具。使用了三四个月，感觉非常方便，Slack有如下优点：\n  \n* 加强版的QQ群+讨论组\n\n有不同的Channel分流不同的话题，你可以只关注自己喜欢的话题。可以方便的新建Channel，加一些人进来讨论。\n\n* 弱干扰\n\nQQ群是强干扰的，有新消息弹窗提示，如果设为免打扰，又怕错过重要信息。而Slack默认当别人提到你或者触发了你关注的关键词后才会弹出桌面通知。\n\n* 第三方集成\n\n之前在创业公司我们使用的Github，Asana，HockyApp，Travis CI等服务，都可以很方便的集成到Slack中，有代码提交、打包完成等都可以收到通知。\n\n当然Slack还有很多小的特性，像语法高亮，收藏内容，修改发出去的内容，@某人，覆盖移动客户端等，针对程序员，在易用性和友好性上有很多优势。\n\n![Slack截图](http://7fviov.com1.z0.glb.clouddn.com/slack.png)\n\n## 为什么？\n  \n我见过很多开发者都有加一些技术QQ群，其实我是比较讨厌技术QQ群的，加进去想学点东西，却发现充满了大量的灌水内容，基本上都会进行屏蔽，食之无味，弃之又可惜。我加过Android开发的唯一一个QQ群，是@Trinea建的开源交流群，Trinea要求比较严格，禁止灌水，但依然有很多无聊的聊天内容，或者有很多小白在里面提问稍微Google一下就能解决的问题，这定然不是我想要的，所以我退了群。\n  \nSlack完全可以替代QQ群，现在唯一的缺点是部分资源在国内被墙，但这也在一定程度上算是个优点，提高了进入者的门槛，不会翻墙的程序员不是好程序员。\n\n国内有些团队是使用Slack沟通的，但针对开发者的群组应该很少，去年接触过一个多月的iOS开发，知道@唐巧建立过一个Slack群组，给我提供了不少可以借鉴的思路，比如Channel如何划分，可以集成RSS阅读等。\n\n## 怎么搞？\n为了保证群组的秩序，我们对Channel进行了如下划分：\n\n* `introduction` 新人入群介绍\n* `general` Android开发通用话题\n* `random` 大家可以在这里八卦、扯淡\n* `troubleshoot` 开发问题可以在这求助\n* `libraries` 讨论开源库的使用和问题\n* `conferences` 讨论Android相关的会议\n* `share` 分享文章、酷应用、新闻等\n* `jobs` 发布招聘相关信息\n* `blog-cn` 和 `blog-en` 是聚合channel，会自动聚会Android开发的文章，请不要随意在这2个channel讨论。如果有好的RSS源，欢迎@jasonross\n\n上面的Channel划为不固定，会不断优化以适应更好的交流，减少信息噪音。但作为一个有态度的Slack群组，我们还是要提高开发者进入的门槛。门槛设置如下：\n\n1. GitHub 所有项目Star数量超过128。\n2. 有独立博客，质量OK。\n3.\t由已加入的朋友引荐。\n\n只要你对Android开发感兴趣，满足上面任意一条，我们都非常欢迎你的加入。当然对于圈子里比较活跃的人，我们会主动找上你。\n\n我相信，这样的交流氛围会产生一些有价值的东西，我们也会考虑定期输出一些内容，回馈社区。\n\n\n## 加入方式\n1. 微博私信 [@寒江不钓](http://weibo.com/402028248) / [@hi大头鬼hi](https://github.com/lzyzsd) / [@light_sky](http://weibo.com/lightSkyStreet)\n2. 发送邮件到 jiajixin@gmail.com\n3. 博客下方留言\n\n通过以上任意一种方式，留下你的**邮箱**和**个人介绍**，有[稀土](http://xitu.io)帐号更好，可以看到你的社交网络，方便群组里的人更好的了解你。\n\n下图是已加入的同学的截图，看看你认识几个头像：\n![你认识几个头像？](http://7fviov.com1.z0.glb.clouddn.com/pt2015_07_13_10_34_43.jpg)\n","source":"_posts/slack-android.md","raw":"title: 有态度的Slack群组\ndate: 2015-07-09 13:02:14\ntags: [Slack,Android,有态度] \n---\n\n我要建立一个有态度的Slack群组，服务有态度的Android开发者。\n\n## 是什么？\n今年，机缘巧合中，加入了一个比较Geek的创业公司，团队沟通一直使用Slack这个工具。使用了三四个月，感觉非常方便，Slack有如下优点：\n  \n* 加强版的QQ群+讨论组\n\n有不同的Channel分流不同的话题，你可以只关注自己喜欢的话题。可以方便的新建Channel，加一些人进来讨论。\n\n* 弱干扰\n\nQQ群是强干扰的，有新消息弹窗提示，如果设为免打扰，又怕错过重要信息。而Slack默认当别人提到你或者触发了你关注的关键词后才会弹出桌面通知。\n\n* 第三方集成\n\n之前在创业公司我们使用的Github，Asana，HockyApp，Travis CI等服务，都可以很方便的集成到Slack中，有代码提交、打包完成等都可以收到通知。\n\n当然Slack还有很多小的特性，像语法高亮，收藏内容，修改发出去的内容，@某人，覆盖移动客户端等，针对程序员，在易用性和友好性上有很多优势。\n\n![Slack截图](http://7fviov.com1.z0.glb.clouddn.com/slack.png)\n\n## 为什么？\n  \n我见过很多开发者都有加一些技术QQ群，其实我是比较讨厌技术QQ群的，加进去想学点东西，却发现充满了大量的灌水内容，基本上都会进行屏蔽，食之无味，弃之又可惜。我加过Android开发的唯一一个QQ群，是@Trinea建的开源交流群，Trinea要求比较严格，禁止灌水，但依然有很多无聊的聊天内容，或者有很多小白在里面提问稍微Google一下就能解决的问题，这定然不是我想要的，所以我退了群。\n  \nSlack完全可以替代QQ群，现在唯一的缺点是部分资源在国内被墙，但这也在一定程度上算是个优点，提高了进入者的门槛，不会翻墙的程序员不是好程序员。\n\n国内有些团队是使用Slack沟通的，但针对开发者的群组应该很少，去年接触过一个多月的iOS开发，知道@唐巧建立过一个Slack群组，给我提供了不少可以借鉴的思路，比如Channel如何划分，可以集成RSS阅读等。\n\n## 怎么搞？\n为了保证群组的秩序，我们对Channel进行了如下划分：\n\n* `introduction` 新人入群介绍\n* `general` Android开发通用话题\n* `random` 大家可以在这里八卦、扯淡\n* `troubleshoot` 开发问题可以在这求助\n* `libraries` 讨论开源库的使用和问题\n* `conferences` 讨论Android相关的会议\n* `share` 分享文章、酷应用、新闻等\n* `jobs` 发布招聘相关信息\n* `blog-cn` 和 `blog-en` 是聚合channel，会自动聚会Android开发的文章，请不要随意在这2个channel讨论。如果有好的RSS源，欢迎@jasonross\n\n上面的Channel划为不固定，会不断优化以适应更好的交流，减少信息噪音。但作为一个有态度的Slack群组，我们还是要提高开发者进入的门槛。门槛设置如下：\n\n1. GitHub 所有项目Star数量超过128。\n2. 有独立博客，质量OK。\n3.\t由已加入的朋友引荐。\n\n只要你对Android开发感兴趣，满足上面任意一条，我们都非常欢迎你的加入。当然对于圈子里比较活跃的人，我们会主动找上你。\n\n我相信，这样的交流氛围会产生一些有价值的东西，我们也会考虑定期输出一些内容，回馈社区。\n\n\n## 加入方式\n1. 微博私信 [@寒江不钓](http://weibo.com/402028248) / [@hi大头鬼hi](https://github.com/lzyzsd) / [@light_sky](http://weibo.com/lightSkyStreet)\n2. 发送邮件到 jiajixin@gmail.com\n3. 博客下方留言\n\n通过以上任意一种方式，留下你的**邮箱**和**个人介绍**，有[稀土](http://xitu.io)帐号更好，可以看到你的社交网络，方便群组里的人更好的了解你。\n\n下图是已加入的同学的截图，看看你认识几个头像：\n![你认识几个头像？](http://7fviov.com1.z0.glb.clouddn.com/pt2015_07_13_10_34_43.jpg)\n","slug":"slack-android","published":1,"updated":"2015-07-13T04:55:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cig3bgcmb000mx5ubqigee6nw"},{"title":"在路上·2014","date":"2015-02-04T15:05:41.000Z","_content":"\n『风紧扯呼』，今夜的北京狂风肆虐，过两天我也要回家了。偷得浮生半日闲，终于有时间可以回首一下即将过去的2014年，今年本命年，经历了很多事情，很多也是人生中的大事。\n\n## 实习面试\n3月初就开始准备实习面试的事情，基本上边玩边看书，陆续地投递了几份简历。当时想做Android研发的实习工作，但来学校宣讲的很多公司比较传统，所以很多都没去参加面试。\n\n回首一下，主要面试了这么几家公司：\n\n- 上海胜略。\n技术面试没问题，估计是HR面跪了，一个是聊天的时候谈到创业的事情，估计给人不踏实的感觉，另外听他们说是做内部产品，估计我言语中流露出了不太喜欢。\n- 上海绿茶，联想旗下公司，做手机浏览器。宣讲的时候说同事很多都是百度出来的，受不了太多束缚，想做点事情，所以去了绿茶。技术面试没问题，终面和一个经理聊，都说会给offer了，后来聊到产品，夸奖了一下猎豹的视频播放功能，然后就没有然后了，真他妈小气。想做些事情的人，去了联想，还老是宣传公司朝九晚五，想想也是可笑。\n- 上海英语流利说。我们导师认识他们老总，帮我推荐了一下，很快就得到了Android负责人的电话面试，技术面试还算可以，但后面也没有收到其他回复。想想主要当时有点嚣张吧，开发过几款App，觉得Android开发没有太多难度，也有点想去做Java后台开发，当时表露了这个想法，是有点图样图森破了。现在看来，这款产品还是挺不错的，他们团队应该在上海也是挺不错的了。\n- 北京百度。面了两次，第一次专业不太对口，一面就跪了；第二次面试，Android相关问题回答的比较一般，虽然写过不少APP代码，但深入点的知识还是有所欠缺，再加上百度面试特别喜欢问算法题或者智力题，电话面试的情况下我的思考能力又差，所以后来也是跪了。\n- 杭州阿里。三次电面通过，最后一次现场面跪了，我觉得主要是现场表现的比较一般，回答问题有点太简略了，给面试官的印象不太好。\n- 上海饿了么。 4月份的时候，应该很多人还不知道这个公司，我也是之前买.me域名看权重的时候，发现了他们的网站(ele.me)。当时朋友的朋友帮我内推了一下，简单电话面试后去上海参加了现场面，前台妹子非常不热情，面试官估计是一个本科生，手上脏兮兮的，一直抖着腿，面试的问题也挺傻逼，给我的印象非常不好，最后也是跪了。\n- 深圳腾讯。参加了笔试，很多都是C/C++相关的题目，结果最后连面试的机会都没有。\n\n除了这些，还简单面了一些不太对口的公司，有盛大、网易游戏等，总之面一个跪一个，朋友和导师都有点替我着急了。本科的时候，给周鸿祎发邮件怒斥他们APP做的怎么烂，得到了一个面试机会，所以我有直接找老大的习惯。于是给周鸿祎、傅盛和陈琪分别发了邮件，老周转给HR总监了，但面试安排的有点太晚了；傅盛直接没回，不知道是不是邮箱搞错了；陈琪回了邮件，但貌似Android不缺人了。几乎绝望的时候，得到一个大众点评面试的机会，5分钟电话面试就通过了，当时的情况下不想再拖了，并且还有几个同学可以一起去实习，所以就决定去大众点评，于是找实习的日子就这样结束了。\n\n## 大众点评实习\n5月初，去了上海，去了大众点评实习，一去就是八个月。\n之前没有进过互联网公司，所以在点评了解到了很多东西。敏捷开发是什么样的，每个阶段占多长时间，各种角色怎么打交道，应用大了编译时间这么长，APP开发还有这么多监控，数据mock工具挺好用的，200万crash还能打补丁修复等等，总之长了不少见识吧。\n但在点评做的事情却不是很多，想想主要有包精简、新手引导动画、魅族适配、活动监控，然后还改过几个视角效果，8个月貌似就做了这么点事情，的确有点太悠闲了。\n## 网络安全\n\n![乌云漏洞](http://jiajixin.qiniudn.com/wooyun_ld.png)\n\n在点评实习的前几个月，我还学了点Web安全的东西，在乌云上提交了几个漏洞。\n- 有锤子科技撞库的，后来他们的安全工程师送了我一个锤子手机的F码，再后来我在秘密上看到朋友里有人爆料老罗脾气暴躁等等，估计就是那个工程师了，因为锤子员工我只有他的手机号。\n- 有豌豆荚帐号泄密的，送了我一个抱枕和clickandgrow植物盆栽，真是土豪啊。\n- 有脉脉客户端任意密码重置的，送了一大箱零食，那个月我貌似胖了20斤。\n- 春秋航空短信验证有问题，后来送了一个飞机模型，听说外面卖200多。\n- 还有雨林木风、滴滴打车、乐蜂网、乐视网、墨迹天气的，都不知道送点东西，唉。\n\n除了这些乌云漏洞，还搞过不少账户：\n- 用ig战队月如的号打过天梯2400的局，还赢了。\n- 同学不带我玩dota的时候，登上他的11帐号，他就乖了。\n- 进了小米员工的支付宝，50000多余额，支付宝的认证机制当时应该是有问题的，可以被跳过，当然我没作恶。\n- 搞到过几个VPN帐号，有红杏年费会员、POPvpn年费会员、貌似还有小米的VPN帐号。\n- 你知道周鸿祎的美空密码是多少吗？ak4774ka，老周是有多么喜欢AK47啊。\n- 不小心在代码库里发现了同事的帐号密码，你以为代码中删除了密码就解决问题了吗，git log中依然有保留啊。\n- 差点忘了，手头还有几个摄像头，韩国人貌似睡觉前喜欢放段音乐入睡啊。\n\n找漏洞不是件容易的事情，更多的时候靠感觉，也就前几个月有些收获，后来我都懒得去找了。\n## 博客\n5月份开始维护这个博客，到年底也就写了三四篇文章，产量挺低的，但每一篇都是自己的沉淀。小时候看《桃花扇传奇》，女主角李香君说过的「与众不同」四个字对我影响很深，所以这个博客我不想写千篇一律的东西，没有沉淀就不要写。\n\n![博客流量](http://jiajixin.qiniudn.com/blog_traffic_2014.png)\n\n博客流量还算可以吧，八个月一万多UV，基本上每篇文章能带来两三千UV，分享一下经验吧。我的博客流量主要来源是CSDN的极客头条和fenng的StartUp News，CSDN有个审核过程，但文章优秀基本都能通过，然后写个脚本刷到前几条应该不是难事，fenng的网站流量也很大，并且无审核，作弊上头条也很容易，但用户鱼龙混杂，跳出率应该比较高。然后还有几个小的网站，伯乐头条和开发者头条，流量不多。\n\n## 产品\n在点评实习的时候，还构思了一款产品，云影。在线观看视频的，是用的是百度网盘上的资源，利用百度网盘开放API的一个漏洞，可以做到网盘资源分享，一键搜索视频播放，做出来应该有不少用户，毕竟找电影资源是个很大的需求。主要的问题，一个是盗版的问题，这个倒不用太考虑，有百度网盘背锅。另一个问题就是貌似百度网盘的资源在很多地方播放速度不太理想，这个就不好解决了，毕竟视频播放流畅速度是个非常重要的体验。在点评空闲的日子，云影的代码也写了不少，采用了MaterialDesign设计风格，简单的框架搭好了，但现在挺忙的，估计后面没有时间去做这件事了。\n\n![云影Git Log](http://jiajixin.qiniudn.com/cm_git_log.png)\n\n## 校招offer\n在点评实习期间，参加了极客马拉松比赛，获得了三等奖，然后实习表现还算优秀吧，所以转正的时候获得了Special Offer。10月份校招的时候，请了一个月假，参加了百度、360和阿里的面试，还是都跪了，所以就打算留在点评了，这边给的待遇很不错，还有点股票，唯一不太满意的就是有点太悠闲，并且点评的技术氛围谈不上很好。12月底的时候，同学帮我内推了一下百度，电面三次，去北京现场面一次，最终拿下了offer。拿到offer反而有点犹豫了，点评给的待遇高，钱倒不是什么问题，然后上海户口应该也能拿到，北京户口压根都不要想，北京的压力还更大一些。五六天的思考时间，一天一个想法，那几天问了一二十个在北京的同学朋友，他们在北京都是怎么打算的，大多数也都没有北京户口，有些人没想太多，有打算过两年去杭州的，有打算过两年回家的，大多数都感觉留不下啊。最后的时刻还是选择了百度，一方面百度的技术氛围更好一些，另一方面是在点评留下更多的是因为户口待遇，户口如果以后不打算留在上海，这些东西也没什么用，还是要看看找个哪里的妹子吧；待遇的话，我算了一下，股票也就值一二十万，并且要待够四年时间，虽然我比较看来点评的未来，但觉得自己很难在一个比较成熟的公司待四年，并且上海的互联网公司还少，过两年真不知道跳到哪里去，再说去北京四年，应该比上海四年，要混的好一些。\n## 百度实习\n百度给的是iOS的offer，由于之前一直做Android开发，iOS开发经验基本为0，所以起初挺不情愿的，我对c系列的语言一直不太熟，所以也把这次机会当做是一种挑战。\n年前来百度实习了两三周，深感压力很大。一两周的时间去熟悉代码，然后讲给同事听，并且还是在OC语言都不熟的情况下。在点评的时候，晚上6点就可以走了，在百度每天到家基本上都要10点了，前两天来的时候，看代码不知道如何下手，并且回家那么晚，甚至都不想待在这了，第二天找老大聊天，给了点建议和指导，让我受益匪浅，感觉牛逼的人都思路清晰，有自己的一套方法论。不知为啥，在公司感觉效率比较低，所以经常回家看代码到一两点，周末有时间也要去看，所以来到北京真的是感觉很累，并且北京这空气质量也真是差，坐地铁真是人挤人。\n对比一下百度和点评吧，说一下印象深刻的几个点：\n- 百度这边架构还算不错吧，有的问题也一直在重构，来这边也学到了一些分层解耦的思想。在点评实习了8个月，我对其架构谈不上了解，主要是没有代码串讲的过程吧，想想新人代码串讲真的是个比较不错的思路，去点评开始的时候也会让你看上两三点代码，但看的怎么样根本没人在乎吧。\n- 百度这边用的还是SVN，真的是感觉挺操蛋的，但是历史原因页不太好迁移，在点评用GIt还是挺爽的，SVN在Mac下的客户端免费的都没有好用的，大家用的CornerStone估计都是盗版的了。\n- 百度这边有个RD自测，就是RD每天会花费一两个小时的时间去跑200多个核心测试用例，开始的时候业务不了解，可能花费时间更长。但真的挺有用的，新人可以比较快的熟悉业务，并且的确可以发现一些问题。我记得之前在点评的时候，有个页面入口比较深，总是进去第一次失败，第二次才成功，后来忘了去提这个事情了，貌似大家也一直没有发现问题，但如果有个RD自测的过程，估计很快就能发现问题了，当然QA也要每天去自测。\n- 百度这边工程师文化，工程师发挥了很多作用，每周工程师都会提出一些优化点和建议，跟产品进行沟通。这其实挺好的一个思路，刚开始去点评的时候，客户端Tab还是黑灰色的，丑的一逼，当时就想提建议，但真的没有很好的渠道，直接找产品经理感觉有些怪，并且有些事情不放到台面上可能不能得到很好的处理，我现在还觉得点评个人信息下面的绿色背景太丑，给人XP桌面壁纸的感觉，还有好友去哪为啥不叫好友去哪儿。\n- 百度这边每周会有一些推荐文章的整理，并且会有技术分享，每周整理出技术周刊。RD自己推荐文章，大家相互分享，在例会上简单介绍一下。在点评实习的时候，我的新浪微博收藏达到了1000多条，里面应该有不少技术文章，很多Android技术点，都有相应的文章或者视频收藏，如果有一个机会分享也是挺好的，技术氛围也会更浓厚一些。\n\n## 总结\n2014年，我在三家公司待过。几十个人的小公司，一直在摸索，创始人没有互联网背景的话很难做出东西，技术上也容易被忽悠；几千人的中型公司，更多的考虑是业务的发展；几万人的大公司，流程更加规范，更加注重技术。互联网每五年左右就会有牛逼的公司诞生，00年BAT，05年360，10年小米，争取这两年积累点技术，两年后抓住那波机会。\n\n在北京工作，的确挺累的，既来之则安之吧，年轻累点也没什么，也是来之前考虑到的，只要不留遗憾就好了。\n\n2015年，要更加努力，更加有计划性，要成为iOS开发高手，要多读几本技术书，要做出点工作成绩。\n\n最近突然想起了《兰亭集序》里的一段话，这段话当时也是高中语文老师极力推崇的，现在看来挺有味道的:\n>夫人之相与，俯仰一世。或取诸怀抱，悟言一室之内；或因寄所托，放浪形骸之外。虽趣舍万殊，静躁不同，当其欣于所遇，暂得于己，快然自足，不知老之将至；及其所之既倦，情随事迁，感慨系之矣。向之所欣，俯仰之间，已为陈迹，犹不能不以之兴怀，况修短随化，终期于尽！古人云：“死生亦大矣”，岂不痛哉！\n","source":"_posts/ontheway-2014.md","raw":"---\ntitle: 在路上·2014\ndate: 2015-02-04 23:05:41\ntags: [总结,实习,工作,百度,大众点评,产品,校招,offer]\n---\n\n『风紧扯呼』，今夜的北京狂风肆虐，过两天我也要回家了。偷得浮生半日闲，终于有时间可以回首一下即将过去的2014年，今年本命年，经历了很多事情，很多也是人生中的大事。\n\n## 实习面试\n3月初就开始准备实习面试的事情，基本上边玩边看书，陆续地投递了几份简历。当时想做Android研发的实习工作，但来学校宣讲的很多公司比较传统，所以很多都没去参加面试。\n\n回首一下，主要面试了这么几家公司：\n\n- 上海胜略。\n技术面试没问题，估计是HR面跪了，一个是聊天的时候谈到创业的事情，估计给人不踏实的感觉，另外听他们说是做内部产品，估计我言语中流露出了不太喜欢。\n- 上海绿茶，联想旗下公司，做手机浏览器。宣讲的时候说同事很多都是百度出来的，受不了太多束缚，想做点事情，所以去了绿茶。技术面试没问题，终面和一个经理聊，都说会给offer了，后来聊到产品，夸奖了一下猎豹的视频播放功能，然后就没有然后了，真他妈小气。想做些事情的人，去了联想，还老是宣传公司朝九晚五，想想也是可笑。\n- 上海英语流利说。我们导师认识他们老总，帮我推荐了一下，很快就得到了Android负责人的电话面试，技术面试还算可以，但后面也没有收到其他回复。想想主要当时有点嚣张吧，开发过几款App，觉得Android开发没有太多难度，也有点想去做Java后台开发，当时表露了这个想法，是有点图样图森破了。现在看来，这款产品还是挺不错的，他们团队应该在上海也是挺不错的了。\n- 北京百度。面了两次，第一次专业不太对口，一面就跪了；第二次面试，Android相关问题回答的比较一般，虽然写过不少APP代码，但深入点的知识还是有所欠缺，再加上百度面试特别喜欢问算法题或者智力题，电话面试的情况下我的思考能力又差，所以后来也是跪了。\n- 杭州阿里。三次电面通过，最后一次现场面跪了，我觉得主要是现场表现的比较一般，回答问题有点太简略了，给面试官的印象不太好。\n- 上海饿了么。 4月份的时候，应该很多人还不知道这个公司，我也是之前买.me域名看权重的时候，发现了他们的网站(ele.me)。当时朋友的朋友帮我内推了一下，简单电话面试后去上海参加了现场面，前台妹子非常不热情，面试官估计是一个本科生，手上脏兮兮的，一直抖着腿，面试的问题也挺傻逼，给我的印象非常不好，最后也是跪了。\n- 深圳腾讯。参加了笔试，很多都是C/C++相关的题目，结果最后连面试的机会都没有。\n\n除了这些，还简单面了一些不太对口的公司，有盛大、网易游戏等，总之面一个跪一个，朋友和导师都有点替我着急了。本科的时候，给周鸿祎发邮件怒斥他们APP做的怎么烂，得到了一个面试机会，所以我有直接找老大的习惯。于是给周鸿祎、傅盛和陈琪分别发了邮件，老周转给HR总监了，但面试安排的有点太晚了；傅盛直接没回，不知道是不是邮箱搞错了；陈琪回了邮件，但貌似Android不缺人了。几乎绝望的时候，得到一个大众点评面试的机会，5分钟电话面试就通过了，当时的情况下不想再拖了，并且还有几个同学可以一起去实习，所以就决定去大众点评，于是找实习的日子就这样结束了。\n\n## 大众点评实习\n5月初，去了上海，去了大众点评实习，一去就是八个月。\n之前没有进过互联网公司，所以在点评了解到了很多东西。敏捷开发是什么样的，每个阶段占多长时间，各种角色怎么打交道，应用大了编译时间这么长，APP开发还有这么多监控，数据mock工具挺好用的，200万crash还能打补丁修复等等，总之长了不少见识吧。\n但在点评做的事情却不是很多，想想主要有包精简、新手引导动画、魅族适配、活动监控，然后还改过几个视角效果，8个月貌似就做了这么点事情，的确有点太悠闲了。\n## 网络安全\n\n![乌云漏洞](http://jiajixin.qiniudn.com/wooyun_ld.png)\n\n在点评实习的前几个月，我还学了点Web安全的东西，在乌云上提交了几个漏洞。\n- 有锤子科技撞库的，后来他们的安全工程师送了我一个锤子手机的F码，再后来我在秘密上看到朋友里有人爆料老罗脾气暴躁等等，估计就是那个工程师了，因为锤子员工我只有他的手机号。\n- 有豌豆荚帐号泄密的，送了我一个抱枕和clickandgrow植物盆栽，真是土豪啊。\n- 有脉脉客户端任意密码重置的，送了一大箱零食，那个月我貌似胖了20斤。\n- 春秋航空短信验证有问题，后来送了一个飞机模型，听说外面卖200多。\n- 还有雨林木风、滴滴打车、乐蜂网、乐视网、墨迹天气的，都不知道送点东西，唉。\n\n除了这些乌云漏洞，还搞过不少账户：\n- 用ig战队月如的号打过天梯2400的局，还赢了。\n- 同学不带我玩dota的时候，登上他的11帐号，他就乖了。\n- 进了小米员工的支付宝，50000多余额，支付宝的认证机制当时应该是有问题的，可以被跳过，当然我没作恶。\n- 搞到过几个VPN帐号，有红杏年费会员、POPvpn年费会员、貌似还有小米的VPN帐号。\n- 你知道周鸿祎的美空密码是多少吗？ak4774ka，老周是有多么喜欢AK47啊。\n- 不小心在代码库里发现了同事的帐号密码，你以为代码中删除了密码就解决问题了吗，git log中依然有保留啊。\n- 差点忘了，手头还有几个摄像头，韩国人貌似睡觉前喜欢放段音乐入睡啊。\n\n找漏洞不是件容易的事情，更多的时候靠感觉，也就前几个月有些收获，后来我都懒得去找了。\n## 博客\n5月份开始维护这个博客，到年底也就写了三四篇文章，产量挺低的，但每一篇都是自己的沉淀。小时候看《桃花扇传奇》，女主角李香君说过的「与众不同」四个字对我影响很深，所以这个博客我不想写千篇一律的东西，没有沉淀就不要写。\n\n![博客流量](http://jiajixin.qiniudn.com/blog_traffic_2014.png)\n\n博客流量还算可以吧，八个月一万多UV，基本上每篇文章能带来两三千UV，分享一下经验吧。我的博客流量主要来源是CSDN的极客头条和fenng的StartUp News，CSDN有个审核过程，但文章优秀基本都能通过，然后写个脚本刷到前几条应该不是难事，fenng的网站流量也很大，并且无审核，作弊上头条也很容易，但用户鱼龙混杂，跳出率应该比较高。然后还有几个小的网站，伯乐头条和开发者头条，流量不多。\n\n## 产品\n在点评实习的时候，还构思了一款产品，云影。在线观看视频的，是用的是百度网盘上的资源，利用百度网盘开放API的一个漏洞，可以做到网盘资源分享，一键搜索视频播放，做出来应该有不少用户，毕竟找电影资源是个很大的需求。主要的问题，一个是盗版的问题，这个倒不用太考虑，有百度网盘背锅。另一个问题就是貌似百度网盘的资源在很多地方播放速度不太理想，这个就不好解决了，毕竟视频播放流畅速度是个非常重要的体验。在点评空闲的日子，云影的代码也写了不少，采用了MaterialDesign设计风格，简单的框架搭好了，但现在挺忙的，估计后面没有时间去做这件事了。\n\n![云影Git Log](http://jiajixin.qiniudn.com/cm_git_log.png)\n\n## 校招offer\n在点评实习期间，参加了极客马拉松比赛，获得了三等奖，然后实习表现还算优秀吧，所以转正的时候获得了Special Offer。10月份校招的时候，请了一个月假，参加了百度、360和阿里的面试，还是都跪了，所以就打算留在点评了，这边给的待遇很不错，还有点股票，唯一不太满意的就是有点太悠闲，并且点评的技术氛围谈不上很好。12月底的时候，同学帮我内推了一下百度，电面三次，去北京现场面一次，最终拿下了offer。拿到offer反而有点犹豫了，点评给的待遇高，钱倒不是什么问题，然后上海户口应该也能拿到，北京户口压根都不要想，北京的压力还更大一些。五六天的思考时间，一天一个想法，那几天问了一二十个在北京的同学朋友，他们在北京都是怎么打算的，大多数也都没有北京户口，有些人没想太多，有打算过两年去杭州的，有打算过两年回家的，大多数都感觉留不下啊。最后的时刻还是选择了百度，一方面百度的技术氛围更好一些，另一方面是在点评留下更多的是因为户口待遇，户口如果以后不打算留在上海，这些东西也没什么用，还是要看看找个哪里的妹子吧；待遇的话，我算了一下，股票也就值一二十万，并且要待够四年时间，虽然我比较看来点评的未来，但觉得自己很难在一个比较成熟的公司待四年，并且上海的互联网公司还少，过两年真不知道跳到哪里去，再说去北京四年，应该比上海四年，要混的好一些。\n## 百度实习\n百度给的是iOS的offer，由于之前一直做Android开发，iOS开发经验基本为0，所以起初挺不情愿的，我对c系列的语言一直不太熟，所以也把这次机会当做是一种挑战。\n年前来百度实习了两三周，深感压力很大。一两周的时间去熟悉代码，然后讲给同事听，并且还是在OC语言都不熟的情况下。在点评的时候，晚上6点就可以走了，在百度每天到家基本上都要10点了，前两天来的时候，看代码不知道如何下手，并且回家那么晚，甚至都不想待在这了，第二天找老大聊天，给了点建议和指导，让我受益匪浅，感觉牛逼的人都思路清晰，有自己的一套方法论。不知为啥，在公司感觉效率比较低，所以经常回家看代码到一两点，周末有时间也要去看，所以来到北京真的是感觉很累，并且北京这空气质量也真是差，坐地铁真是人挤人。\n对比一下百度和点评吧，说一下印象深刻的几个点：\n- 百度这边架构还算不错吧，有的问题也一直在重构，来这边也学到了一些分层解耦的思想。在点评实习了8个月，我对其架构谈不上了解，主要是没有代码串讲的过程吧，想想新人代码串讲真的是个比较不错的思路，去点评开始的时候也会让你看上两三点代码，但看的怎么样根本没人在乎吧。\n- 百度这边用的还是SVN，真的是感觉挺操蛋的，但是历史原因页不太好迁移，在点评用GIt还是挺爽的，SVN在Mac下的客户端免费的都没有好用的，大家用的CornerStone估计都是盗版的了。\n- 百度这边有个RD自测，就是RD每天会花费一两个小时的时间去跑200多个核心测试用例，开始的时候业务不了解，可能花费时间更长。但真的挺有用的，新人可以比较快的熟悉业务，并且的确可以发现一些问题。我记得之前在点评的时候，有个页面入口比较深，总是进去第一次失败，第二次才成功，后来忘了去提这个事情了，貌似大家也一直没有发现问题，但如果有个RD自测的过程，估计很快就能发现问题了，当然QA也要每天去自测。\n- 百度这边工程师文化，工程师发挥了很多作用，每周工程师都会提出一些优化点和建议，跟产品进行沟通。这其实挺好的一个思路，刚开始去点评的时候，客户端Tab还是黑灰色的，丑的一逼，当时就想提建议，但真的没有很好的渠道，直接找产品经理感觉有些怪，并且有些事情不放到台面上可能不能得到很好的处理，我现在还觉得点评个人信息下面的绿色背景太丑，给人XP桌面壁纸的感觉，还有好友去哪为啥不叫好友去哪儿。\n- 百度这边每周会有一些推荐文章的整理，并且会有技术分享，每周整理出技术周刊。RD自己推荐文章，大家相互分享，在例会上简单介绍一下。在点评实习的时候，我的新浪微博收藏达到了1000多条，里面应该有不少技术文章，很多Android技术点，都有相应的文章或者视频收藏，如果有一个机会分享也是挺好的，技术氛围也会更浓厚一些。\n\n## 总结\n2014年，我在三家公司待过。几十个人的小公司，一直在摸索，创始人没有互联网背景的话很难做出东西，技术上也容易被忽悠；几千人的中型公司，更多的考虑是业务的发展；几万人的大公司，流程更加规范，更加注重技术。互联网每五年左右就会有牛逼的公司诞生，00年BAT，05年360，10年小米，争取这两年积累点技术，两年后抓住那波机会。\n\n在北京工作，的确挺累的，既来之则安之吧，年轻累点也没什么，也是来之前考虑到的，只要不留遗憾就好了。\n\n2015年，要更加努力，更加有计划性，要成为iOS开发高手，要多读几本技术书，要做出点工作成绩。\n\n最近突然想起了《兰亭集序》里的一段话，这段话当时也是高中语文老师极力推崇的，现在看来挺有味道的:\n>夫人之相与，俯仰一世。或取诸怀抱，悟言一室之内；或因寄所托，放浪形骸之外。虽趣舍万殊，静躁不同，当其欣于所遇，暂得于己，快然自足，不知老之将至；及其所之既倦，情随事迁，感慨系之矣。向之所欣，俯仰之间，已为陈迹，犹不能不以之兴怀，况修短随化，终期于尽！古人云：“死生亦大矣”，岂不痛哉！\n","slug":"ontheway-2014","published":1,"updated":"2015-02-17T14:24:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cig3bgcmg000sx5ubufeuc9wd"},{"title":"Android内存泄漏研究","date":"2015-01-05T16:18:44.000Z","_content":"\n##概念\n###根搜索算法\nAndroid虚拟机的垃圾回收采用的是`根搜索算法`。GC会从根节点（GC Roots）开始对heap进行遍历。到最后，部分没有直接或者间接引用到GC Roots的就是需要回收的垃圾，会被GC回收掉。\n\n根搜索算法相比引用计数法很好的解决了循环引用的问题。举个例子，Activity有View的引用，View也有Activity的引用，之前我还尝试去源代码里找Activity何时和View断开连接是大错特错了。当Activity finish掉之后，Activity和View的循环引用已成孤岛，不再引用到GC Roots，无需断开也会被回收掉。\n\n###内存泄漏\n`Android内存泄漏`指的是进程中某些对象（垃圾对象）已经没有使用价值了，但是它们却可以直接或间接地引用到gc roots导致无法被GC回收。无用的对象占据着内存空间，使得实际可使用内存变小，形象地说法就是内存泄漏了。\n##场景\n- 类的静态变量持有大数据对象\n静态变量长期维持到大数据对象的引用，阻止垃圾回收。\n- 非静态内部类的静态实例\n非静态内部类会维持一个到外部类实例的引用，如果非静态内部类的实例是静态的，就会间接长期维持着外部类的引用，阻止被回收掉。\n- 资源对象未关闭\n资源性对象如Cursor、File、Socket，应该在使用后及时关闭。未在finally中关闭，会导致异常情况下资源对象未被释放的隐患。\n- 注册对象未反注册\n未反注册会导致观察者列表里维持着对象的引用，阻止垃圾回收。\n- `Handler`临时性内存泄露\nHandler通过发送Message与主线程交互，Message发出之后是存储在MessageQueue中的，有些Message也不是马上就被处理的。在Message中存在一个 target，是Handler的一个引用，如果Message在Queue中存在的时间越长，就会导致Handler无法被回收。如果Handler是非静态的，则会导致Activity或者Service不会被回收。\n由于AsyncTask内部也是Handler机制，同样存在内存泄漏的风险。\n此种内存泄露，一般是临时性的。\n\n##预防\n\n - 不要维持到Activity的长久引用，对activity的引用应该和activity本身有相同的生命周期。\n - 尽量使用`context-application`代替`context-activity`\n - Activity中尽量不要使用非静态内部类，可以使用静态内部类和`WeakReference`代替。\n\n##检测\n\n### 静态检测 \n静态检测主要是检测资源未关闭的情况，Eclipse和Android Studio都可以检测出IO或者Socket未关闭的情况，然后在finally中关闭即可。\n### 动态监测\n 动态检测主要是依靠[MAT](https://eclipse.org/mat/)这个工具。2011年Google IO有一个[主题演讲](http://droidyue.com/blog/2014/11/02/note-for-google-io-memory-management-for-android-chinese-edition/)，非常详细地讲解了内存泄露的检测，包含MAT工具的使用，值得一看。\n我在某项目中使用MAT检测，发现一处内存泄漏，分享一下过程。\n从首页到商户列表到商户详情再退回首页执行`Dump HPROF File`，查看MAT中的`Histogram`，过滤Activity后结果如下： ![Histogram][1]\n仍然存在`ShopInfoActivity`的实例，选中右键点击`Merge Shortest Paths to GC Roots`，结果如下： ![Path][2]\n可以看到`ShopDatabase`中维持着`ShopInfoActivity`的引用，查看源代码如下： <pre>\n       public class ShopDatabase {\n           ...\n           private static ShopDatabase instance;\n           public static ShopDatabase getInstance(Context context) {\n               if (instance == null && context != null) {\n                   instance = new ShopDatabase(context);\n               }\n               return instance;\n           }\n           protected Context context;\n           ...\n       } </pre> 很明显，静态变量`instance`长期持有`context`的引用，造成内存泄露。 \n       所以动态检测内存泄露的一个简单思路就是随意操作APP，最后返回首页，然后用MAT检测，查看是否存在Activity多于一个或者Activity不正常存在的问题。\n\n##参考资料\n- [Avoiding memory leaks](http://android-developers.blogspot.com/2009/01/avoiding-memory-leaks.html)\n- [Memory Analysis for Android Applications](http://android-developers.blogspot.com/2011/03/memory-analysis-for-android.html)\n- [memory_management_for_android_apps](http://dubroy.com/memory_management_for_android_apps.pdf)\n- [Google IO：Android内存管理主题演讲记录](http://droidyue.com/blog/2014/11/02/note-for-google-io-memory-management-for-android-chinese-edition/)\n- [Android内存泄漏分析及调试](http://blog.csdn.net/gemmem/article/details/13017999)\n\n  [1]: http://jiajixin.qiniudn.com/histogram.png\n  [2]: http://jiajixin.qiniudn.com/example.png","source":"_posts/memory_leak.md","raw":"title: Android内存泄漏研究\ndate: 2015-01-06 00:18:44\ntags: [Android,内存泄露,Java,MAT]\n---\n\n##概念\n###根搜索算法\nAndroid虚拟机的垃圾回收采用的是`根搜索算法`。GC会从根节点（GC Roots）开始对heap进行遍历。到最后，部分没有直接或者间接引用到GC Roots的就是需要回收的垃圾，会被GC回收掉。\n\n根搜索算法相比引用计数法很好的解决了循环引用的问题。举个例子，Activity有View的引用，View也有Activity的引用，之前我还尝试去源代码里找Activity何时和View断开连接是大错特错了。当Activity finish掉之后，Activity和View的循环引用已成孤岛，不再引用到GC Roots，无需断开也会被回收掉。\n\n###内存泄漏\n`Android内存泄漏`指的是进程中某些对象（垃圾对象）已经没有使用价值了，但是它们却可以直接或间接地引用到gc roots导致无法被GC回收。无用的对象占据着内存空间，使得实际可使用内存变小，形象地说法就是内存泄漏了。\n##场景\n- 类的静态变量持有大数据对象\n静态变量长期维持到大数据对象的引用，阻止垃圾回收。\n- 非静态内部类的静态实例\n非静态内部类会维持一个到外部类实例的引用，如果非静态内部类的实例是静态的，就会间接长期维持着外部类的引用，阻止被回收掉。\n- 资源对象未关闭\n资源性对象如Cursor、File、Socket，应该在使用后及时关闭。未在finally中关闭，会导致异常情况下资源对象未被释放的隐患。\n- 注册对象未反注册\n未反注册会导致观察者列表里维持着对象的引用，阻止垃圾回收。\n- `Handler`临时性内存泄露\nHandler通过发送Message与主线程交互，Message发出之后是存储在MessageQueue中的，有些Message也不是马上就被处理的。在Message中存在一个 target，是Handler的一个引用，如果Message在Queue中存在的时间越长，就会导致Handler无法被回收。如果Handler是非静态的，则会导致Activity或者Service不会被回收。\n由于AsyncTask内部也是Handler机制，同样存在内存泄漏的风险。\n此种内存泄露，一般是临时性的。\n\n##预防\n\n - 不要维持到Activity的长久引用，对activity的引用应该和activity本身有相同的生命周期。\n - 尽量使用`context-application`代替`context-activity`\n - Activity中尽量不要使用非静态内部类，可以使用静态内部类和`WeakReference`代替。\n\n##检测\n\n### 静态检测 \n静态检测主要是检测资源未关闭的情况，Eclipse和Android Studio都可以检测出IO或者Socket未关闭的情况，然后在finally中关闭即可。\n### 动态监测\n 动态检测主要是依靠[MAT](https://eclipse.org/mat/)这个工具。2011年Google IO有一个[主题演讲](http://droidyue.com/blog/2014/11/02/note-for-google-io-memory-management-for-android-chinese-edition/)，非常详细地讲解了内存泄露的检测，包含MAT工具的使用，值得一看。\n我在某项目中使用MAT检测，发现一处内存泄漏，分享一下过程。\n从首页到商户列表到商户详情再退回首页执行`Dump HPROF File`，查看MAT中的`Histogram`，过滤Activity后结果如下： ![Histogram][1]\n仍然存在`ShopInfoActivity`的实例，选中右键点击`Merge Shortest Paths to GC Roots`，结果如下： ![Path][2]\n可以看到`ShopDatabase`中维持着`ShopInfoActivity`的引用，查看源代码如下： <pre>\n       public class ShopDatabase {\n           ...\n           private static ShopDatabase instance;\n           public static ShopDatabase getInstance(Context context) {\n               if (instance == null && context != null) {\n                   instance = new ShopDatabase(context);\n               }\n               return instance;\n           }\n           protected Context context;\n           ...\n       } </pre> 很明显，静态变量`instance`长期持有`context`的引用，造成内存泄露。 \n       所以动态检测内存泄露的一个简单思路就是随意操作APP，最后返回首页，然后用MAT检测，查看是否存在Activity多于一个或者Activity不正常存在的问题。\n\n##参考资料\n- [Avoiding memory leaks](http://android-developers.blogspot.com/2009/01/avoiding-memory-leaks.html)\n- [Memory Analysis for Android Applications](http://android-developers.blogspot.com/2011/03/memory-analysis-for-android.html)\n- [memory_management_for_android_apps](http://dubroy.com/memory_management_for_android_apps.pdf)\n- [Google IO：Android内存管理主题演讲记录](http://droidyue.com/blog/2014/11/02/note-for-google-io-memory-management-for-android-chinese-edition/)\n- [Android内存泄漏分析及调试](http://blog.csdn.net/gemmem/article/details/13017999)\n\n  [1]: http://jiajixin.qiniudn.com/histogram.png\n  [2]: http://jiajixin.qiniudn.com/example.png","slug":"memory_leak","published":1,"updated":"2015-02-05T06:54:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cig3bgcmo0019x5ubpoe44mhf"},{"title":"Mac下显示桌面应用开发","date":"2015-02-21T12:13:13.000Z","_content":"\n由于开始接触iOS开发，所以最近一直在Mac下工作。在Windows上，有个显示桌面的图标，对于有点洁癖的人来说，点击一下还我清爽，非常实用。在Mac下，⌘+F3快捷键虽然可以达到类似的效果，但触发后桌面边缘有阴影，且点击桌面文件后会重新显示之前隐藏的应用，不是很爽。知乎上有人问过Mac显示桌面的问题，应该有不少Mac用户需要这个功能，AppStore搜索了一下，真有相关应用，但需要付费，所以我就打算自己开发一款。\n\n##技术要点\n没有太多精力，第一个版本我只想实现两个功能：\n\n1. 状态栏点击图标，即显示桌面，所有显示窗口最小化。\n2. 开机默认自启动，无需用户配置。\n\n###状态栏\n首先要在状态栏显示图标,代码如下：\n<pre>\nstatusItem = [[NSStatusBar systemStatusBar] statusItemWithLength:NSVariableStatusItemLength];\n[statusItem setImage:[NSImage imageNamed:@\"StatusIcon\"]];\n[statusItem setHighlightMode:YES];\n[statusItem setAction:@selector(onStatusItemClicked:)];\n[statusItem setTarget:self];\n</pre>\n**注意**：由于只显示状态栏图标，不显示窗口和菜单栏，所以需要在plist文件中设置`Application is background only`为`YES`。\n\n###显示桌面\n如何实现显示桌面呢？\n其实显示桌面是有快捷键的，`CMD+ALT+H+M`，按下CMD+ALT+H就会隐藏当前窗口除外的窗口，CMD+M会隐藏当前窗口，所以同时按下CMD+ALT+H+M就会达到显示桌面的效果。\n\n所以现在需要做的就是模拟按键，之前做Java桌面应用开发的时候，有个Robot类非常方便，查阅了一下资料，Mac开发也有类似方法：\n<pre>\nGEventSourceRef src = CGEventSourceCreate(kCGEventSourceStateHIDSystemState);\nCGEventRef cmdDown = CGEventCreateKeyboardEvent(src, kVK_Command, true);\nCGEventPost(kCGHIDEventTap, cmdDown);\n</pre> \n其中`kVK_Command`参数是指虚拟按键，对应的是`0x37`,代指Command按键。`kVK_Command`在`<Carbon/Carbon.h>`中枚举定义，所以需要`#import <Carbon/Carbon.h>`。\n###开机启动\nMac开发实现开机启动有多种方式，比较方便的是使用`LSSharedFileListInsertItemURL`方法，腾讯的老谭有篇[文章](http://www.tanhao.me/pieces/380.html)，参考了一下，不过其中的`LSSharedFileListItemResolve`已被废弃，需要用`LSSharedFileListItemCopyResolvedURL`代替。\n##成果\n###效果图\n代码比较简单，也已在[Github](https://github.com/jasonross/ShowDeskTop)上开源，最终效果图如下:\n![演示动画](http://jiajixin.qiniudn.com/show_desktop.gif)\n\n###应用下载\n[http://jiajixin.cn/ShowDeskTop.app.zip](http://jiajixin.cn/ShowDeskTop.app.zip)\n\n###不足之处\n时间仓促，应用有些不足之处：\n\n1. 不会作图，所以图标不是很优雅，只能说看的过去，如果你有更好的图标，可以给我提交[Pull Request](https://github.com/jasonross/ShowDeskTop)。\n2. 不支持自定义快捷键和退出功能，由于状态栏图标要保持操作简单，所以不会添加菜单选项，后面可以考虑在Dock中添加。\n3. 不支持复制自身到`应用程序`文件夹中，后续会添加此功能。","source":"_posts/mac-application-show-desktop.md","raw":"---\ntitle: Mac下显示桌面应用开发\ndate: 2015-02-21 20:13:13\ntags: [mac开发,显示桌面,开机启动,状态栏,快捷键]\n---\n\n由于开始接触iOS开发，所以最近一直在Mac下工作。在Windows上，有个显示桌面的图标，对于有点洁癖的人来说，点击一下还我清爽，非常实用。在Mac下，⌘+F3快捷键虽然可以达到类似的效果，但触发后桌面边缘有阴影，且点击桌面文件后会重新显示之前隐藏的应用，不是很爽。知乎上有人问过Mac显示桌面的问题，应该有不少Mac用户需要这个功能，AppStore搜索了一下，真有相关应用，但需要付费，所以我就打算自己开发一款。\n\n##技术要点\n没有太多精力，第一个版本我只想实现两个功能：\n\n1. 状态栏点击图标，即显示桌面，所有显示窗口最小化。\n2. 开机默认自启动，无需用户配置。\n\n###状态栏\n首先要在状态栏显示图标,代码如下：\n<pre>\nstatusItem = [[NSStatusBar systemStatusBar] statusItemWithLength:NSVariableStatusItemLength];\n[statusItem setImage:[NSImage imageNamed:@\"StatusIcon\"]];\n[statusItem setHighlightMode:YES];\n[statusItem setAction:@selector(onStatusItemClicked:)];\n[statusItem setTarget:self];\n</pre>\n**注意**：由于只显示状态栏图标，不显示窗口和菜单栏，所以需要在plist文件中设置`Application is background only`为`YES`。\n\n###显示桌面\n如何实现显示桌面呢？\n其实显示桌面是有快捷键的，`CMD+ALT+H+M`，按下CMD+ALT+H就会隐藏当前窗口除外的窗口，CMD+M会隐藏当前窗口，所以同时按下CMD+ALT+H+M就会达到显示桌面的效果。\n\n所以现在需要做的就是模拟按键，之前做Java桌面应用开发的时候，有个Robot类非常方便，查阅了一下资料，Mac开发也有类似方法：\n<pre>\nGEventSourceRef src = CGEventSourceCreate(kCGEventSourceStateHIDSystemState);\nCGEventRef cmdDown = CGEventCreateKeyboardEvent(src, kVK_Command, true);\nCGEventPost(kCGHIDEventTap, cmdDown);\n</pre> \n其中`kVK_Command`参数是指虚拟按键，对应的是`0x37`,代指Command按键。`kVK_Command`在`<Carbon/Carbon.h>`中枚举定义，所以需要`#import <Carbon/Carbon.h>`。\n###开机启动\nMac开发实现开机启动有多种方式，比较方便的是使用`LSSharedFileListInsertItemURL`方法，腾讯的老谭有篇[文章](http://www.tanhao.me/pieces/380.html)，参考了一下，不过其中的`LSSharedFileListItemResolve`已被废弃，需要用`LSSharedFileListItemCopyResolvedURL`代替。\n##成果\n###效果图\n代码比较简单，也已在[Github](https://github.com/jasonross/ShowDeskTop)上开源，最终效果图如下:\n![演示动画](http://jiajixin.qiniudn.com/show_desktop.gif)\n\n###应用下载\n[http://jiajixin.cn/ShowDeskTop.app.zip](http://jiajixin.cn/ShowDeskTop.app.zip)\n\n###不足之处\n时间仓促，应用有些不足之处：\n\n1. 不会作图，所以图标不是很优雅，只能说看的过去，如果你有更好的图标，可以给我提交[Pull Request](https://github.com/jasonross/ShowDeskTop)。\n2. 不支持自定义快捷键和退出功能，由于状态栏图标要保持操作简单，所以不会添加菜单选项，后面可以考虑在Dock中添加。\n3. 不支持复制自身到`应用程序`文件夹中，后续会添加此功能。","slug":"mac-application-show-desktop","published":1,"updated":"2015-02-21T16:28:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cig3bgcmy001hx5ubwqpucp6x"},{"title":"开篇","date":"2014-05-15T16:16:16.000Z","_content":"\n##简介##\n万网姓名域名+Github Pages+Hexo，就这样，新博客开张了。\n\n[.cn姓名域名](http://www.net.cn/domain/xingming/)每年只要10元，非常便宜。[GitHub Pages](https://pages.github.com/)访问速度有点慢，可以用国内[GitCafe](https://gitcafe.com/)等同类服务，我是懒得换了，还是GitHub的氛围好些。最近利用闲暇时间看了[Pro Git](http://git.oschina.net/progit/)，基本熟悉了Git的使用，希望后面可以在GitHub上留点东西。\n\n##定位##\n之前有过两个博客，第一个博客有点访问量，但老是觉得内容有些肤浅，全是些奇淫巧计。第二个博客基本没怎么写东西，天下文章一大抄，看人们抄来抄去挺没意思的，自己也懒得写。\n<!--more-->\n熟悉Java和Android开发，了解Web安全，关注互联网创业，喜欢传统文化，逐渐走上工作岗位，渐渐地有了很多经验和感触，希望可以分享给大家。所以本博客的定位主要在以下几个方面：\n>Java、Android、Web安全、创业、工作、生活、文化\n\n\n##初衷##\n不求流量，不为钱财，不为写而写，希望可以忘却名利、随心所欲地写点原创的东西。知己难逢，也希望可以借此博客，认识一些志同道合的朋友。\n\n谨以此篇，纪念逝去的时光。愿此博客，青春永驻。\n\n---\n*文章是用MarkDown写的，不怎么关心排版，非常喜欢。*\n\n\n","source":"_posts/hello-world.md","raw":"title: 开篇\ndate: 2014-05-16 0:16:16\ntags: [开篇] \n---\n\n##简介##\n万网姓名域名+Github Pages+Hexo，就这样，新博客开张了。\n\n[.cn姓名域名](http://www.net.cn/domain/xingming/)每年只要10元，非常便宜。[GitHub Pages](https://pages.github.com/)访问速度有点慢，可以用国内[GitCafe](https://gitcafe.com/)等同类服务，我是懒得换了，还是GitHub的氛围好些。最近利用闲暇时间看了[Pro Git](http://git.oschina.net/progit/)，基本熟悉了Git的使用，希望后面可以在GitHub上留点东西。\n\n##定位##\n之前有过两个博客，第一个博客有点访问量，但老是觉得内容有些肤浅，全是些奇淫巧计。第二个博客基本没怎么写东西，天下文章一大抄，看人们抄来抄去挺没意思的，自己也懒得写。\n<!--more-->\n熟悉Java和Android开发，了解Web安全，关注互联网创业，喜欢传统文化，逐渐走上工作岗位，渐渐地有了很多经验和感触，希望可以分享给大家。所以本博客的定位主要在以下几个方面：\n>Java、Android、Web安全、创业、工作、生活、文化\n\n\n##初衷##\n不求流量，不为钱财，不为写而写，希望可以忘却名利、随心所欲地写点原创的东西。知己难逢，也希望可以借此博客，认识一些志同道合的朋友。\n\n谨以此篇，纪念逝去的时光。愿此博客，青春永驻。\n\n---\n*文章是用MarkDown写的，不怎么关心排版，非常喜欢。*\n\n\n","slug":"hello-world","published":1,"updated":"2015-07-08T13:32:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cig3bgcn5001sx5ubninmkmr0"},{"title":"我不是为了黑你，我就是认真","date":"2014-05-23T16:01:39.000Z","_content":"\n周二早上和朋友聊天，我说锤子手机今晚发布，他说4000元有人买吗？我当时说了一句，**成功很多时候是需要机遇的，但认真的去做一件事很重要**。关注老罗还是比较早的吧，看过不少他的资料、语录和演讲。虽然有些吹毛求疵、不合时宜，但他对「契约精神」、「版权意识」、「公平正义」的理解和坚持超出这个社会的平均值太多太多，若在武侠世界，他必是侠客。从来没有怀疑过老罗会做不出一个好手机，那晚的发布会也没让人失望，说下对发布会印象最深的几点吧。\n\n- **他山之石** 你会看到锤子手机无论从硬件、设计和软件上，要么用了业界领先的解决方案，要么找了专业人士，要么借鉴同行产品亮点。优秀的艺术家复制，伟大的艺术家剽窃。\n- **信息透明** 老罗把业内的一些东西掰开给你讲，给人一种透明感，这是消费者非常喜欢的。\n- **保险思维** 智能手机怕摔，哪个厂商不了解，但却没人想到保险这种思维，风险均摊。\n- **就是认真** 发布会最后的那句「我不是为了输赢，我就是认真」和我早上对朋友讲的那句遥相呼应，所以你可以看到我的情怀。\n\n\n##撞库是一种情怀\n\n当天晚上就注册了锤子官网账号，但却遇到账号无法登录，微博上搜索了一下，也有人遇到这种问题，可能系统上线有些仓促吧。第二天开始还是登录不上，请注意，我就顺手用Chrome的审查元素分析了一下登录过程，发现登录用的是Http Get请求，直接浏览器打开网址403，估计是请求头Refer有认证吧，立刻写了段Java代码验证了一下果然如此。\n\n对撞库还没有实战经验，之前因为[京东密码泄露恶意炒作](http://drops.wooyun.org/news/989)了解了撞库这个概念，当时我就感觉自己被历史选中了，由于上次分析出的小米密码不在公司电脑上，我是第二天才去撞库的，自己也就写了十几行代码就撞出了六七个账号。[乌云](http://wooyun.org/bugs/wooyun-2014-061871)上传漏洞，选中获取邀请码（上次学校官网漏洞影响太小,不给邀请码），然后就是焦急的等待。还是很顺利的拿到了邀请码，发布的漏洞获得一群小黑客关注，可能是这群白帽不是程序员出身吧，竟然说我有耐心只是因为他们觉得撞库结果验证比较麻烦，我会告诉他们我只写了十几行代码吗。锤子科技的回复还是比较及时的，在我的追问下，后面也加入了登录IP限制，问题已经解决，我这篇文章也可以发出来了。今天收到了锤子手机优先购买码一枚，感谢锤子科技的诚意。没想到锤子刚刚起步就如此重视安全，上个月我就在微博看到，老罗在招安全人才，发布上OpenSSL捐款一展情怀，实属难能可贵。\n\n![乌云漏洞](http://jiajixin.qiniudn.com/wooyun_smartisan.png)\n\n撞库这个问题的解决方案，可以参考[网站被黑客扫描撞库该怎么应对防范](http://www.zhihu.com/question/21555879)。\n\n上篇文章刚分析了小米论坛泄露的密码，这篇就用到了；老罗N年前搞传销的经历，也让他在讲台上挥洒自如；正如乔布斯所说：\n>Again, you can't connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. You have to trust in something - your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life.\n\n##郑重声明\n\n部门媒体报告此事有些夸大事实，不希望此事给锤子手机带来负面影响，在此郑重声明，老罗团队对待安全是非常认真的，对，他们就是认真。\n\n没有人比我更爱老罗，**我不是为了黑你，我就是认真**。\n\n\n\n\n\n\n\n","source":"_posts/hack_ttt.md","raw":"title: 我不是为了黑你，我就是认真\ndate: 2014-05-24 00:01:39\ntags: [锤子科技,撞库,创业,Web安全]\n---\n\n周二早上和朋友聊天，我说锤子手机今晚发布，他说4000元有人买吗？我当时说了一句，**成功很多时候是需要机遇的，但认真的去做一件事很重要**。关注老罗还是比较早的吧，看过不少他的资料、语录和演讲。虽然有些吹毛求疵、不合时宜，但他对「契约精神」、「版权意识」、「公平正义」的理解和坚持超出这个社会的平均值太多太多，若在武侠世界，他必是侠客。从来没有怀疑过老罗会做不出一个好手机，那晚的发布会也没让人失望，说下对发布会印象最深的几点吧。\n\n- **他山之石** 你会看到锤子手机无论从硬件、设计和软件上，要么用了业界领先的解决方案，要么找了专业人士，要么借鉴同行产品亮点。优秀的艺术家复制，伟大的艺术家剽窃。\n- **信息透明** 老罗把业内的一些东西掰开给你讲，给人一种透明感，这是消费者非常喜欢的。\n- **保险思维** 智能手机怕摔，哪个厂商不了解，但却没人想到保险这种思维，风险均摊。\n- **就是认真** 发布会最后的那句「我不是为了输赢，我就是认真」和我早上对朋友讲的那句遥相呼应，所以你可以看到我的情怀。\n\n\n##撞库是一种情怀\n\n当天晚上就注册了锤子官网账号，但却遇到账号无法登录，微博上搜索了一下，也有人遇到这种问题，可能系统上线有些仓促吧。第二天开始还是登录不上，请注意，我就顺手用Chrome的审查元素分析了一下登录过程，发现登录用的是Http Get请求，直接浏览器打开网址403，估计是请求头Refer有认证吧，立刻写了段Java代码验证了一下果然如此。\n\n对撞库还没有实战经验，之前因为[京东密码泄露恶意炒作](http://drops.wooyun.org/news/989)了解了撞库这个概念，当时我就感觉自己被历史选中了，由于上次分析出的小米密码不在公司电脑上，我是第二天才去撞库的，自己也就写了十几行代码就撞出了六七个账号。[乌云](http://wooyun.org/bugs/wooyun-2014-061871)上传漏洞，选中获取邀请码（上次学校官网漏洞影响太小,不给邀请码），然后就是焦急的等待。还是很顺利的拿到了邀请码，发布的漏洞获得一群小黑客关注，可能是这群白帽不是程序员出身吧，竟然说我有耐心只是因为他们觉得撞库结果验证比较麻烦，我会告诉他们我只写了十几行代码吗。锤子科技的回复还是比较及时的，在我的追问下，后面也加入了登录IP限制，问题已经解决，我这篇文章也可以发出来了。今天收到了锤子手机优先购买码一枚，感谢锤子科技的诚意。没想到锤子刚刚起步就如此重视安全，上个月我就在微博看到，老罗在招安全人才，发布上OpenSSL捐款一展情怀，实属难能可贵。\n\n![乌云漏洞](http://jiajixin.qiniudn.com/wooyun_smartisan.png)\n\n撞库这个问题的解决方案，可以参考[网站被黑客扫描撞库该怎么应对防范](http://www.zhihu.com/question/21555879)。\n\n上篇文章刚分析了小米论坛泄露的密码，这篇就用到了；老罗N年前搞传销的经历，也让他在讲台上挥洒自如；正如乔布斯所说：\n>Again, you can't connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. You have to trust in something - your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life.\n\n##郑重声明\n\n部门媒体报告此事有些夸大事实，不希望此事给锤子手机带来负面影响，在此郑重声明，老罗团队对待安全是非常认真的，对，他们就是认真。\n\n没有人比我更爱老罗，**我不是为了黑你，我就是认真**。\n\n\n\n\n\n\n\n","slug":"hack_ttt","published":1,"updated":"2015-02-21T12:16:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cig3bgcn8001vx5ubmaw1yqm7"},{"title":"构建神器Gradle","date":"2015-08-07T08:58:59.000Z","_content":"\n**本文为CSDN约稿文章，首发地址为：[Android项目中如何用好构建神器Gradle?](http://www.csdn.net/article/2015-08-10/2825420)。如需转载，请与CSDN联系。原文错误，会在本站更新。**\n\n最近在忙团队并行开发的事情，主要是将各个团队的代码分库，一方面可以降低耦合，为后面模块插件化做铺垫，另一方面采用二进制编译，可以加快编译速度。分库遇到了一些问题，很多都要通过Gradle脚本解决，所以稍微花时间研究了一下。\n\nGradle虽为构建神器，但感觉学习曲线比较陡峭。[Gradle User Guide](https://docs.gradle.org/current/userguide/userguide.html)内容很多，但有点太多了，多的你看不完，[Gradle Plugin User Guide](http://tools.android.com/tech-docs/new-build-system/user-guide)一篇文章主要讲了Android相关的配置，看完可能感觉马马虎虎会用，但到了修改一些构建流程的时候还是不知所措。经过一段时间的摸索，我觉得在Android项目中用好Gradle，你要做到以下三点：\n\n1. 了解 `Groovy` 基本语法。\n2. 粗读 `Gradle User Guide` 和 `Gradle Plugin User Guide`。\n3. 实战，实战，再实战。(三遍，你懂的)\n\n涉及到的知识点和内容比较多，我不会一一讲解，本文主要会解答自己学习过程中的一些疑问，讲解一些相关概念和实战经验，过程中也会推荐一些有质量的博客文章。\n\n## Groovy语言\n\nGradle基于Groovy语言，虽然接触Gradle比较久，甚至写过一点Groovy语句，但对语言本身并不了解。为什么用Groovy呢？Groovy运行在JVM上，在Java语言的基础上，借鉴了脚本语言的诸多特性，相比Java代码量更少，Groovy兼容Java，可以使用Groovy和Java混合编程，可以直接使用各种Java类库。\n\nGroovy语法的学习，推荐官方文章[Differences with Java](http://www.groovy-lang.org/differences.html)和IBM developerWorks的[精通Groovy](http://www.ibm.com/developerworks/cn/education/java/j-groovy/j-groovy.html)。了解了基本语法，对读写gradle脚本都会有帮助，比如随便举下面几个例子：\n\n1. 比如为何在gradle脚本中使用InputStream不用import包，而使用ZipFile需要import包？因为groovy默认import了下面的包和类，无需再import.\n\n\t```\n\tjava.io.*\n\tjava.lang.*\n\tjava.math.BigDecimal\n\tjava.math.BigInteger\n\tjava.net.*\n\tjava.util.*\n\tgroovy.lang.*\n\tgroovy.util.*\n\t```\n\n2. 经常看到${var1}的用法是怎么回事？\n这是Groovy中的[GString](http://blog.csdn.net/hivon/article/details/2271000)，可以在双引号中直接使用，用于字符串叠加非常方便。\n\n\t```\n\tdef dx = tasks.findByName(\"dex${variant.name.capitalize()}\")\n\t```\n\n3. 下面的代码你真的能看懂吗？\n\n\t```\n\t//apply是一个方法，plugin是参数，值为'com.android.application'\n\tapply plugin: 'com.android.application'\n\n\t/**\n\t*buildscript,repositories和dependencies本身是方法名。\n\t*后面跟的大括号部分，都是一个闭包，作为方法的参数。\n\t*闭包可以简单的理解为一个代码块或方法指针。\n\t*/\n\tbuildscript {\n\t    repositories {\n\t        jcenter()\n\t    }\n\t    dependencies {\n\t        classpath 'com.android.tools.build:gradle:1.2.3'\n\t    }\n\t}\n\n\t//groovy遍历的一种写法 each后面是闭包\n\tandroid.applicationVariants.each { variant ->\n\t}\n\t```\n\n## Gradle概念\n下面讲几个Gradle相关的概念，几个比较重要的吧，更多的东西还是要自己去看`Gradle User Guide`。\n\n### 生命周期\nGradle构建系统有自己的[生命周期](https://docs.gradle.org/current/userguide/build_lifecycle.html)，初始化、配置和运行三个阶段。\n\n1. 初始化阶段，会去读取根工程中setting.gradle中的include信息，决定有哪几个工程加入构建，创建project实例，比如下面有三个工程：\n```\ninclude ':app', ':lib1', ':lib2'\n```\n2. 配置阶段，会去执行所有工程的build.gradle脚本，配置project对象，一个对象由多个任务组成，此阶段也会去创建、配置task及相关信息。\n3. 运行阶段，根据gradle命令传递过来的task名称，执行相关依赖任务。\n\n### 任务创建\n很多文章都会告诉你，任务创建要这样：\n\n```\ntask hello {\n    doLast {\n        println \"hello\"\n    }\n}\n```\n或者用`<<`替换doLast，那我就很纳闷，定义个任务怎么这么麻烦，还要加什么doLast，我直接这样不行吗？\n\n```\ntask hello {\n    println \"hello\"\n}\n```\n上面的这种写法，“hello” 是在gradle的配置阶段打印出来的，而前面的写法是在gradle的运行阶段打印出来的，所以怎么写要看你的需求了。\n\n另外task中有一个action list，task运行时会顺序执行action list中的action，doLast或者doFirst后面跟的闭包就是一个action，doLast是把action插入到list的最后面，而doFirst是把action插入到list的最前面。\n\n### 任务依赖\n当我们在Android工程中执行./gradlew build的时候，会有很多任务运行，因为build任务依赖了很多任务，要先执行依赖任务才能运行当前任务。任务依赖主要使用dependsOn方法，如下所示：\n\n```\ntask A << {println 'Hello from A'}\ntask B << {println 'Hello from B'}\ntask C << {println 'Hello from C'}\nB.dependsOn A\nC.dependsOn B\n```\n了解更多，可以看一下侦跃翻译的[Gradle tip #3-Task顺序](http://blog.csdn.net/lzyzsd/article/details/46935405)。\n\n### 增量构建\n你在执行gradle命令的时候，是不是经常看到有些任务后面跟着[UP-TO-DATE]，这是怎么回事？\n\n在Gradle中，每一个task都有inputs和outputs，如果在执行一个Task时，如果它的输入和输出与前一次执行时没有发生变化，那么Gradle便会认为该Task是最新的，因此Gradle将不予执行，这就是增量构建的概念。\n\n一个task的inputs和outputs可以是一个或多个文件，可以是文件夹，还可以是project的某个property，甚至可以是某个闭包所定义的条件。自定义task默认每次执行，但通过指定inputs和outputs，可以达到增量构建的效果。\n\n### 依赖传递\nGradle默认支持传递性依赖，比如当前工程依赖包A，包A依赖包B，那么当前工程会自动依赖包B。同时，Gradle支持排除和关闭依赖性传递。\n\n之前引入远程AAR，一般会这样写：\n\n```\ncompile 'com.somepackage:LIBRARY_NAME:1.0.0@aar'\n```\n\n上面的写法会关闭依赖性传递，所以有时候可能就会出问题，为什么呢？本来以为@aar是指定下载的格式，但其实不然，远程仓库文件下载格式应该是由pom文件中[packaging属性](http://www.infoq.com/cn/news/2011/06/xxb-maven-9-package)决定的，@符号的真正作用是[Artifact only notation](https://docs.gradle.org/current/userguide/dependency_management.html),也就是只下载文件本身，不下载依赖，相当于变相的关闭了依赖传递，可以看一下sf的[这个问题](http://stackoverflow.com/questions/22795455/transitive-dependencies-not-resolved-for-aar-library-using-gradle)，通过添加transitive=true可以解决。但其实如果远程仓库有pom文件存在，compile后面根本不需要加\"@aar\"，也就不会遇到这个问题了。\n\n## Android Gradle实战\n下面讲讲在Android Gradle实战中遇到的一些问题和经验，感觉还是蛮多干货的。\n\n### productFlavors\n这个东西基本上已经烂大街了，gradle的项目一般都会使用Product Flavor，看完美团的文章，你应该就懂了。\n\n>[美团Android自动化之旅—适配渠道包](http://tech.meituan.com/mt-apk-adaptation.html)\n\n### buildTypes\n很多App有内测版和正式版，怎么让他们同时安装在一个手机上？同时安装在一个手机上，要求packageName不同的，用productFlavors可以解决，但可能不够优雅，alpha版本还要来个debug和release版本岂不是很蛋疼？可以用buildTypes来解决，淘宝朱鸿的[文章](http://hugozhu.myalert.info/2014/08/03/50-use-gradle-to-customize-apk-build.html)有比较详细的讲解，但有些内容可能有些过时了，需要更改脚本。\n\n### 依赖更新\n项目依赖的远程包如果有更新，会有提醒或者自动更新吗？\n\nSNAPSHOT(changing)和+号(dynamic)版本默认24小时自动更新，通过更改resolutionStrategy可以修改检查周期。\n\n```\nconfigurations.all {\n    // check for updates every build\n    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'\n    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'\n}\ndependencies {\n\tcompile 'com.dianping.nova.business:search:1.0.+'\n\tcompile 'com.dianping.nova.business:selectdish:1.0.6-SNAPSHOT'\n}\n```\n\n### 上传aar到Maven仓库\n在工程的build.gradle中添加如下脚本：\n\n```\napply plugin: 'maven'\nuploadArchives {\n    repositories {\n        mavenDeployer {\n            pom.groupId = GROUP_ID\n            pom.artifactId = ARTIFACT_ID\n            pom.version = VERSION\n            repository(url: RELEASE_REPOSITORY_URL) {\n                authentication(userName: USERNAME, password: PASSWORD)\n            }\n        }\n    }\n}\n```\n\n在build.gradle同目录下添加gradle.properties文件，配置如下：\n\n```\nGROUP_ID=dianping.android.nova.thirdparty\nARTIFACT_ID=zxing\nVERSION=1.0\nRELEASE_REPOSITORY_URL=http://mvn.dp.com/nova\nUSERNAME=hello\nPASSWORD=hello\n```\n\ngradle.properties的属性会被build.gradle读取用来上传aar，最后执行`./gradlew :Zxing:uploadArchives`即可。\n\n更多配置，可参考[建立企业内部maven服务器并使用Android Studio发布公共项目](http://blog.csdn.net/qinxiandiqi/article/details/44458707)。\n\n### 取消任务\n项目构建过程中那么多任务，有些test相关的任务可能根本不需要，可以直接关掉，在build.gradle中加入如下脚本：\n\n```\ntasks.whenTaskAdded { task ->\n    if (task.name.contains('AndroidTest')) {\n        task.enabled = false\n    }\n}\n```\n\ntasks会获取当前project中所有的task，enabled属性控制任务开关，whenTaskAdded后面的闭包会在gradle配置阶段完成。\n\n### 加入任务\n任务可以取消了，但还不尽兴啊，想加入任务怎么搞？前面讲了dependsOn的方法，那就拿过来用啊，但是原有任务的依赖关系你又不是很清楚，甚至任务名称都不知道，怎么搞？\n\n比如我想在执行dex打包之前，加入一个hello任务，可以这么写：\n\n```\nafterEvaluate {\n    android.applicationVariants.each { variant ->\n        def dx = tasks.findByName(\"dex${variant.name.capitalize()}\")\n        def hello = \"hello${variant.name.capitalize()}\"\n        task(hello) << {\n\t\t\tprintln \"hello\"\n        }\n        tasks.findByName(hello).dependsOn dx.taskDependencies.getDependencies(dx)\n        dx.dependsOn tasks.findByName(hello)\n    }\n}\n```\n\nafterEvaluate是什么鸟？你可以理解为在配置阶段要结束，项目评估完会走到这一步。\n\nvariant呢？variant = productFlavors+ buildTypes，所以dex打包的任务可能就是dexCommonDebug。\n\n你怎么知道dex任务的具体名称？Android Studio中的Gradle Console在执行gradle任务的时候会有输出，可以仔细观察一下。\n\nhello任务定义的这么复杂干啥？我直接就叫hello不行吗?不行，each就是遍历variants，如果每个都叫hello，多个variant都一样，岂不是傻傻分不清楚，加上variant的name做后缀，才有任务的区分。\n\n关键来了，dx.taskDependencies.getDependencies(dx)会获取dx任务的所有依赖，让hello任务依赖dx任务的所有依赖，再让dx任务依赖hello任务，这样就可以加入某个任务到构建流程了，是不是感觉非常灵活。\n\n我突然想到，用doFirst的方式加入一个action到dx任务中，应该也可以达到上面效果。\n\n### gradle加速\ngradle加速可以看看这位朋友写的[加速Android Studio/Gradle构建](http://blog.isming.me/2015/03/18/android-build-speed-up/)，我就不多嘴了。并行编译，常驻内存，还有离线模式这些思路对gradle的加速感觉还是比较有限。\n\n想要更快，可以尝试下Facebook出品的[Buck](https://buckbuild.com/)，可以看一下Vine团队适配Buck的[技术文章](http://engineering.vine.co/post/117873038742/reducing-build-times-by-adopting-buck)，我们的架构师也有适配Buck，加速效果在10倍左右，但有两个缺点，不支持Windows系统，不支持远程依赖。\n\n\n### 任务监听\n你想知道每个执行任务的运行时间吗？你想知道每个执行任务都是干嘛的吗？把下面这段脚本加入build.gradle中即可：\n\n```\nclass TimingsListener implements TaskExecutionListener, BuildListener {\n    private Clock clock\n    private timings = []\n\n    @Override\n    void beforeExecute(Task task) {\n        clock = new org.gradle.util.Clock()\n    }\n\n    @Override\n    void afterExecute(Task task, TaskState taskState) {\n        def ms = clock.timeInMs\n        timings.add([ms, task.path])\n        task.project.logger.warn \"${task.path} took ${ms}ms\"\n    }\n\n    @Override\n    void buildFinished(BuildResult result) {\n        println \"Task timings:\"\n        for (timing in timings) {\n            if (timing[0] >= 50) {\n                printf \"%7sms  %s\\n\", timing\n            }\n        }\n    }\n\n    @Override\n    void buildStarted(Gradle gradle) {}\n\n    @Override\n    void projectsEvaluated(Gradle gradle) {}\n\n    @Override\n    void projectsLoaded(Gradle gradle) {}\n\n    @Override\n    void settingsEvaluated(Settings settings) {}\n}\n\ngradle.addListener new TimingsListener()\n```\n\n上面是对每个任务计时的一个例子，想要了解每个任务的作用，你可以修改上面的脚本，打印出每个任务的inputs和outputs。比如assembleDebug那么多依赖任务，每个都是干什么的，一会compile，一会generate，有什么区别？看到每个task的输入输出，就可以大体看出它的作用。如果对assemble的每个任务监听，你会发现改一行代码build的时间主要花费在了dex上，buck牛逼的地方就是对这个地方进行了优化，大大减少了增量编译运行的时间。\n\n### buildscript方法\nAndroid项目中，根工程默认的build.gradle应该是这样的：\n\n```\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:1.2.3'\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n    }\n}\n```\n\n一会一个jcenter()这是在干什么？buildscript方法的作用是配置脚本的依赖，而我们平常用的compile是配置project的依赖。repositories的意思就是需要包的时候到哥这里来找，然后你以为`com.android.tools.build:gradle:1.2.3`会从jcenter那里下载了是吧，图样图森破，不信加入下面这段脚本看看输出：\n\n```\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    repositories.each {\n        println it.getUrl()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:1.2.3'\n    }\n}\n```\n\n结果是这样的：\n>file:/Applications/Android%20Studio.app/Contents/gradle/m2repository/\n>https://jcenter.bintray.com/\n\n我靠，仓库竟然直接在Android Studio应用内部，下面还有更爽的，我们知道有依赖传递，上面classpath 中的`gradle`依赖`gradle-core`，`gradle-core`依赖`lint`，`lint`依赖`lint-checks`，`lint-checks`最后依赖到了`asm`，并且这个根目录中的依赖配置会传到所有工程的配置文件，所以如果你要引用asm相关的类，不用设置classpath，直接import就可以了。你怎么知道前面的依赖关系的？看上面m2repository目录中对应的pom文件就可以了。\n\n为什么讲到ASM呢？[ASM](http://asm.ow2.org/)又是个比较刁的东西，可以直接用来操纵Java字节码，达到动态更改class文件的效果。可以用ASM[面向切面编程](http://developer.51cto.com/art/201309/410861_all.htm)，达到解耦效果。[Android DEX自动拆包及动态加载简介](http://tech.meituan.com/mt-android-auto-split-dex.html)中提到的class依赖分析和R常量替换的脚本都可以用ASM来搞。\n\n### 引入脚本\n脚本写多了，都挤在一个build.gradle里也不好，人长大了总要自己出去住，那可以把部分脚本抽出去吗？当然可以，新建一个other.gradle把脚本抽离，然后在build.gradle中添加`apply from 'other.gradle'`即可，抽出去以后你会发现本来可以直接import的asm包找不到了，怎么回事？根工程中配置的buildscript会传递到所有工程，但只会传到build.gradle脚本中，其他脚本可不管，所以你要在other.gradle中重新配置buildscript，可以在other.gradle中加入：\n\n```\nbuildscript {\n    repositories {\n       jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:1.2.3'\n    }\n}\n```\n\n### 获取AndroidManifest文件\n[ApplicationId versus PackageName](http://tools.android.com/tech-docs/new-build-system/applicationid-vs-packagename)提到，gradle中的applicationid用来区分应用，manifest中packageName用来指定R文件包名，并且各个productFlavor 的manifest中的packageName应该一致。applicationid只是gradle脚本中的定义，其实最后生成的apk中的manifest文件的packageName还是会被applicationid替换掉。\n\n那获取R文件的包名怎么搞？要获取AndroidManifest中package属性，并且这个manifest要是起始的文件，因为最终文件中的package属性会被applicationid冲掉，由于各个manifest中的package属性一样，并且非主manifest可以没有package属性，所以只有获取主manifest的package属性才是最准确的。\n\n```\ndef manifestFile = android.sourceSets.main.manifest.srcFile\ndef packageName = new XmlParser().parse(manifestFile).attribute('package')\n```\n\n### 无用资源\n\n无用的资源就不要打包进APK了。\n>[Resource Shrinking](http://tools.android.com/tech-docs/new-build-system/resource-shrinking)\n\n### 一个Bug\n之前在创业公司，用[Travis](https://travis-ci.org/)做持续继承，遇到一个让我很纠结的问题。在Travis上执行构建脚本如下：\n\n```\n./gradlew clean\n./gradlew assembleXR\n```\n\n最后生成的APK在运行的时候报错，提示找不到某个.so文件，解压发现APK中果然缺少某个库工程的.so文件，但在本地运行的时候却是没有问题，纠结了好久，后来研究发现Android Studio中执行Clean Project的时候，会执行generateSources的任务，把它加入构建脚本后才打包正确。最近发现，这原来是个[Bug](https://code.google.com/p/android/issues/detail?id=106579&thanks=106579&ts=1421971822)，并且已经在android gradle1.3被修复了。\n\n匆匆忙忙间，写了很多东西。读完此文，希望你能感受到构建神器的魅力，感受到它的灵活强大，当然也希望能让你使用Gradle更加得心应手。","source":"_posts/gradle-android.md","raw":"title: 构建神器Gradle\ndate: 2015-08-07 16:58:59\ntags: [Android Studio,Gradle,Android,Groovy]\n---\n\n**本文为CSDN约稿文章，首发地址为：[Android项目中如何用好构建神器Gradle?](http://www.csdn.net/article/2015-08-10/2825420)。如需转载，请与CSDN联系。原文错误，会在本站更新。**\n\n最近在忙团队并行开发的事情，主要是将各个团队的代码分库，一方面可以降低耦合，为后面模块插件化做铺垫，另一方面采用二进制编译，可以加快编译速度。分库遇到了一些问题，很多都要通过Gradle脚本解决，所以稍微花时间研究了一下。\n\nGradle虽为构建神器，但感觉学习曲线比较陡峭。[Gradle User Guide](https://docs.gradle.org/current/userguide/userguide.html)内容很多，但有点太多了，多的你看不完，[Gradle Plugin User Guide](http://tools.android.com/tech-docs/new-build-system/user-guide)一篇文章主要讲了Android相关的配置，看完可能感觉马马虎虎会用，但到了修改一些构建流程的时候还是不知所措。经过一段时间的摸索，我觉得在Android项目中用好Gradle，你要做到以下三点：\n\n1. 了解 `Groovy` 基本语法。\n2. 粗读 `Gradle User Guide` 和 `Gradle Plugin User Guide`。\n3. 实战，实战，再实战。(三遍，你懂的)\n\n涉及到的知识点和内容比较多，我不会一一讲解，本文主要会解答自己学习过程中的一些疑问，讲解一些相关概念和实战经验，过程中也会推荐一些有质量的博客文章。\n\n## Groovy语言\n\nGradle基于Groovy语言，虽然接触Gradle比较久，甚至写过一点Groovy语句，但对语言本身并不了解。为什么用Groovy呢？Groovy运行在JVM上，在Java语言的基础上，借鉴了脚本语言的诸多特性，相比Java代码量更少，Groovy兼容Java，可以使用Groovy和Java混合编程，可以直接使用各种Java类库。\n\nGroovy语法的学习，推荐官方文章[Differences with Java](http://www.groovy-lang.org/differences.html)和IBM developerWorks的[精通Groovy](http://www.ibm.com/developerworks/cn/education/java/j-groovy/j-groovy.html)。了解了基本语法，对读写gradle脚本都会有帮助，比如随便举下面几个例子：\n\n1. 比如为何在gradle脚本中使用InputStream不用import包，而使用ZipFile需要import包？因为groovy默认import了下面的包和类，无需再import.\n\n\t```\n\tjava.io.*\n\tjava.lang.*\n\tjava.math.BigDecimal\n\tjava.math.BigInteger\n\tjava.net.*\n\tjava.util.*\n\tgroovy.lang.*\n\tgroovy.util.*\n\t```\n\n2. 经常看到${var1}的用法是怎么回事？\n这是Groovy中的[GString](http://blog.csdn.net/hivon/article/details/2271000)，可以在双引号中直接使用，用于字符串叠加非常方便。\n\n\t```\n\tdef dx = tasks.findByName(\"dex${variant.name.capitalize()}\")\n\t```\n\n3. 下面的代码你真的能看懂吗？\n\n\t```\n\t//apply是一个方法，plugin是参数，值为'com.android.application'\n\tapply plugin: 'com.android.application'\n\n\t/**\n\t*buildscript,repositories和dependencies本身是方法名。\n\t*后面跟的大括号部分，都是一个闭包，作为方法的参数。\n\t*闭包可以简单的理解为一个代码块或方法指针。\n\t*/\n\tbuildscript {\n\t    repositories {\n\t        jcenter()\n\t    }\n\t    dependencies {\n\t        classpath 'com.android.tools.build:gradle:1.2.3'\n\t    }\n\t}\n\n\t//groovy遍历的一种写法 each后面是闭包\n\tandroid.applicationVariants.each { variant ->\n\t}\n\t```\n\n## Gradle概念\n下面讲几个Gradle相关的概念，几个比较重要的吧，更多的东西还是要自己去看`Gradle User Guide`。\n\n### 生命周期\nGradle构建系统有自己的[生命周期](https://docs.gradle.org/current/userguide/build_lifecycle.html)，初始化、配置和运行三个阶段。\n\n1. 初始化阶段，会去读取根工程中setting.gradle中的include信息，决定有哪几个工程加入构建，创建project实例，比如下面有三个工程：\n```\ninclude ':app', ':lib1', ':lib2'\n```\n2. 配置阶段，会去执行所有工程的build.gradle脚本，配置project对象，一个对象由多个任务组成，此阶段也会去创建、配置task及相关信息。\n3. 运行阶段，根据gradle命令传递过来的task名称，执行相关依赖任务。\n\n### 任务创建\n很多文章都会告诉你，任务创建要这样：\n\n```\ntask hello {\n    doLast {\n        println \"hello\"\n    }\n}\n```\n或者用`<<`替换doLast，那我就很纳闷，定义个任务怎么这么麻烦，还要加什么doLast，我直接这样不行吗？\n\n```\ntask hello {\n    println \"hello\"\n}\n```\n上面的这种写法，“hello” 是在gradle的配置阶段打印出来的，而前面的写法是在gradle的运行阶段打印出来的，所以怎么写要看你的需求了。\n\n另外task中有一个action list，task运行时会顺序执行action list中的action，doLast或者doFirst后面跟的闭包就是一个action，doLast是把action插入到list的最后面，而doFirst是把action插入到list的最前面。\n\n### 任务依赖\n当我们在Android工程中执行./gradlew build的时候，会有很多任务运行，因为build任务依赖了很多任务，要先执行依赖任务才能运行当前任务。任务依赖主要使用dependsOn方法，如下所示：\n\n```\ntask A << {println 'Hello from A'}\ntask B << {println 'Hello from B'}\ntask C << {println 'Hello from C'}\nB.dependsOn A\nC.dependsOn B\n```\n了解更多，可以看一下侦跃翻译的[Gradle tip #3-Task顺序](http://blog.csdn.net/lzyzsd/article/details/46935405)。\n\n### 增量构建\n你在执行gradle命令的时候，是不是经常看到有些任务后面跟着[UP-TO-DATE]，这是怎么回事？\n\n在Gradle中，每一个task都有inputs和outputs，如果在执行一个Task时，如果它的输入和输出与前一次执行时没有发生变化，那么Gradle便会认为该Task是最新的，因此Gradle将不予执行，这就是增量构建的概念。\n\n一个task的inputs和outputs可以是一个或多个文件，可以是文件夹，还可以是project的某个property，甚至可以是某个闭包所定义的条件。自定义task默认每次执行，但通过指定inputs和outputs，可以达到增量构建的效果。\n\n### 依赖传递\nGradle默认支持传递性依赖，比如当前工程依赖包A，包A依赖包B，那么当前工程会自动依赖包B。同时，Gradle支持排除和关闭依赖性传递。\n\n之前引入远程AAR，一般会这样写：\n\n```\ncompile 'com.somepackage:LIBRARY_NAME:1.0.0@aar'\n```\n\n上面的写法会关闭依赖性传递，所以有时候可能就会出问题，为什么呢？本来以为@aar是指定下载的格式，但其实不然，远程仓库文件下载格式应该是由pom文件中[packaging属性](http://www.infoq.com/cn/news/2011/06/xxb-maven-9-package)决定的，@符号的真正作用是[Artifact only notation](https://docs.gradle.org/current/userguide/dependency_management.html),也就是只下载文件本身，不下载依赖，相当于变相的关闭了依赖传递，可以看一下sf的[这个问题](http://stackoverflow.com/questions/22795455/transitive-dependencies-not-resolved-for-aar-library-using-gradle)，通过添加transitive=true可以解决。但其实如果远程仓库有pom文件存在，compile后面根本不需要加\"@aar\"，也就不会遇到这个问题了。\n\n## Android Gradle实战\n下面讲讲在Android Gradle实战中遇到的一些问题和经验，感觉还是蛮多干货的。\n\n### productFlavors\n这个东西基本上已经烂大街了，gradle的项目一般都会使用Product Flavor，看完美团的文章，你应该就懂了。\n\n>[美团Android自动化之旅—适配渠道包](http://tech.meituan.com/mt-apk-adaptation.html)\n\n### buildTypes\n很多App有内测版和正式版，怎么让他们同时安装在一个手机上？同时安装在一个手机上，要求packageName不同的，用productFlavors可以解决，但可能不够优雅，alpha版本还要来个debug和release版本岂不是很蛋疼？可以用buildTypes来解决，淘宝朱鸿的[文章](http://hugozhu.myalert.info/2014/08/03/50-use-gradle-to-customize-apk-build.html)有比较详细的讲解，但有些内容可能有些过时了，需要更改脚本。\n\n### 依赖更新\n项目依赖的远程包如果有更新，会有提醒或者自动更新吗？\n\nSNAPSHOT(changing)和+号(dynamic)版本默认24小时自动更新，通过更改resolutionStrategy可以修改检查周期。\n\n```\nconfigurations.all {\n    // check for updates every build\n    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'\n    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'\n}\ndependencies {\n\tcompile 'com.dianping.nova.business:search:1.0.+'\n\tcompile 'com.dianping.nova.business:selectdish:1.0.6-SNAPSHOT'\n}\n```\n\n### 上传aar到Maven仓库\n在工程的build.gradle中添加如下脚本：\n\n```\napply plugin: 'maven'\nuploadArchives {\n    repositories {\n        mavenDeployer {\n            pom.groupId = GROUP_ID\n            pom.artifactId = ARTIFACT_ID\n            pom.version = VERSION\n            repository(url: RELEASE_REPOSITORY_URL) {\n                authentication(userName: USERNAME, password: PASSWORD)\n            }\n        }\n    }\n}\n```\n\n在build.gradle同目录下添加gradle.properties文件，配置如下：\n\n```\nGROUP_ID=dianping.android.nova.thirdparty\nARTIFACT_ID=zxing\nVERSION=1.0\nRELEASE_REPOSITORY_URL=http://mvn.dp.com/nova\nUSERNAME=hello\nPASSWORD=hello\n```\n\ngradle.properties的属性会被build.gradle读取用来上传aar，最后执行`./gradlew :Zxing:uploadArchives`即可。\n\n更多配置，可参考[建立企业内部maven服务器并使用Android Studio发布公共项目](http://blog.csdn.net/qinxiandiqi/article/details/44458707)。\n\n### 取消任务\n项目构建过程中那么多任务，有些test相关的任务可能根本不需要，可以直接关掉，在build.gradle中加入如下脚本：\n\n```\ntasks.whenTaskAdded { task ->\n    if (task.name.contains('AndroidTest')) {\n        task.enabled = false\n    }\n}\n```\n\ntasks会获取当前project中所有的task，enabled属性控制任务开关，whenTaskAdded后面的闭包会在gradle配置阶段完成。\n\n### 加入任务\n任务可以取消了，但还不尽兴啊，想加入任务怎么搞？前面讲了dependsOn的方法，那就拿过来用啊，但是原有任务的依赖关系你又不是很清楚，甚至任务名称都不知道，怎么搞？\n\n比如我想在执行dex打包之前，加入一个hello任务，可以这么写：\n\n```\nafterEvaluate {\n    android.applicationVariants.each { variant ->\n        def dx = tasks.findByName(\"dex${variant.name.capitalize()}\")\n        def hello = \"hello${variant.name.capitalize()}\"\n        task(hello) << {\n\t\t\tprintln \"hello\"\n        }\n        tasks.findByName(hello).dependsOn dx.taskDependencies.getDependencies(dx)\n        dx.dependsOn tasks.findByName(hello)\n    }\n}\n```\n\nafterEvaluate是什么鸟？你可以理解为在配置阶段要结束，项目评估完会走到这一步。\n\nvariant呢？variant = productFlavors+ buildTypes，所以dex打包的任务可能就是dexCommonDebug。\n\n你怎么知道dex任务的具体名称？Android Studio中的Gradle Console在执行gradle任务的时候会有输出，可以仔细观察一下。\n\nhello任务定义的这么复杂干啥？我直接就叫hello不行吗?不行，each就是遍历variants，如果每个都叫hello，多个variant都一样，岂不是傻傻分不清楚，加上variant的name做后缀，才有任务的区分。\n\n关键来了，dx.taskDependencies.getDependencies(dx)会获取dx任务的所有依赖，让hello任务依赖dx任务的所有依赖，再让dx任务依赖hello任务，这样就可以加入某个任务到构建流程了，是不是感觉非常灵活。\n\n我突然想到，用doFirst的方式加入一个action到dx任务中，应该也可以达到上面效果。\n\n### gradle加速\ngradle加速可以看看这位朋友写的[加速Android Studio/Gradle构建](http://blog.isming.me/2015/03/18/android-build-speed-up/)，我就不多嘴了。并行编译，常驻内存，还有离线模式这些思路对gradle的加速感觉还是比较有限。\n\n想要更快，可以尝试下Facebook出品的[Buck](https://buckbuild.com/)，可以看一下Vine团队适配Buck的[技术文章](http://engineering.vine.co/post/117873038742/reducing-build-times-by-adopting-buck)，我们的架构师也有适配Buck，加速效果在10倍左右，但有两个缺点，不支持Windows系统，不支持远程依赖。\n\n\n### 任务监听\n你想知道每个执行任务的运行时间吗？你想知道每个执行任务都是干嘛的吗？把下面这段脚本加入build.gradle中即可：\n\n```\nclass TimingsListener implements TaskExecutionListener, BuildListener {\n    private Clock clock\n    private timings = []\n\n    @Override\n    void beforeExecute(Task task) {\n        clock = new org.gradle.util.Clock()\n    }\n\n    @Override\n    void afterExecute(Task task, TaskState taskState) {\n        def ms = clock.timeInMs\n        timings.add([ms, task.path])\n        task.project.logger.warn \"${task.path} took ${ms}ms\"\n    }\n\n    @Override\n    void buildFinished(BuildResult result) {\n        println \"Task timings:\"\n        for (timing in timings) {\n            if (timing[0] >= 50) {\n                printf \"%7sms  %s\\n\", timing\n            }\n        }\n    }\n\n    @Override\n    void buildStarted(Gradle gradle) {}\n\n    @Override\n    void projectsEvaluated(Gradle gradle) {}\n\n    @Override\n    void projectsLoaded(Gradle gradle) {}\n\n    @Override\n    void settingsEvaluated(Settings settings) {}\n}\n\ngradle.addListener new TimingsListener()\n```\n\n上面是对每个任务计时的一个例子，想要了解每个任务的作用，你可以修改上面的脚本，打印出每个任务的inputs和outputs。比如assembleDebug那么多依赖任务，每个都是干什么的，一会compile，一会generate，有什么区别？看到每个task的输入输出，就可以大体看出它的作用。如果对assemble的每个任务监听，你会发现改一行代码build的时间主要花费在了dex上，buck牛逼的地方就是对这个地方进行了优化，大大减少了增量编译运行的时间。\n\n### buildscript方法\nAndroid项目中，根工程默认的build.gradle应该是这样的：\n\n```\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:1.2.3'\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n    }\n}\n```\n\n一会一个jcenter()这是在干什么？buildscript方法的作用是配置脚本的依赖，而我们平常用的compile是配置project的依赖。repositories的意思就是需要包的时候到哥这里来找，然后你以为`com.android.tools.build:gradle:1.2.3`会从jcenter那里下载了是吧，图样图森破，不信加入下面这段脚本看看输出：\n\n```\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    repositories.each {\n        println it.getUrl()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:1.2.3'\n    }\n}\n```\n\n结果是这样的：\n>file:/Applications/Android%20Studio.app/Contents/gradle/m2repository/\n>https://jcenter.bintray.com/\n\n我靠，仓库竟然直接在Android Studio应用内部，下面还有更爽的，我们知道有依赖传递，上面classpath 中的`gradle`依赖`gradle-core`，`gradle-core`依赖`lint`，`lint`依赖`lint-checks`，`lint-checks`最后依赖到了`asm`，并且这个根目录中的依赖配置会传到所有工程的配置文件，所以如果你要引用asm相关的类，不用设置classpath，直接import就可以了。你怎么知道前面的依赖关系的？看上面m2repository目录中对应的pom文件就可以了。\n\n为什么讲到ASM呢？[ASM](http://asm.ow2.org/)又是个比较刁的东西，可以直接用来操纵Java字节码，达到动态更改class文件的效果。可以用ASM[面向切面编程](http://developer.51cto.com/art/201309/410861_all.htm)，达到解耦效果。[Android DEX自动拆包及动态加载简介](http://tech.meituan.com/mt-android-auto-split-dex.html)中提到的class依赖分析和R常量替换的脚本都可以用ASM来搞。\n\n### 引入脚本\n脚本写多了，都挤在一个build.gradle里也不好，人长大了总要自己出去住，那可以把部分脚本抽出去吗？当然可以，新建一个other.gradle把脚本抽离，然后在build.gradle中添加`apply from 'other.gradle'`即可，抽出去以后你会发现本来可以直接import的asm包找不到了，怎么回事？根工程中配置的buildscript会传递到所有工程，但只会传到build.gradle脚本中，其他脚本可不管，所以你要在other.gradle中重新配置buildscript，可以在other.gradle中加入：\n\n```\nbuildscript {\n    repositories {\n       jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:1.2.3'\n    }\n}\n```\n\n### 获取AndroidManifest文件\n[ApplicationId versus PackageName](http://tools.android.com/tech-docs/new-build-system/applicationid-vs-packagename)提到，gradle中的applicationid用来区分应用，manifest中packageName用来指定R文件包名，并且各个productFlavor 的manifest中的packageName应该一致。applicationid只是gradle脚本中的定义，其实最后生成的apk中的manifest文件的packageName还是会被applicationid替换掉。\n\n那获取R文件的包名怎么搞？要获取AndroidManifest中package属性，并且这个manifest要是起始的文件，因为最终文件中的package属性会被applicationid冲掉，由于各个manifest中的package属性一样，并且非主manifest可以没有package属性，所以只有获取主manifest的package属性才是最准确的。\n\n```\ndef manifestFile = android.sourceSets.main.manifest.srcFile\ndef packageName = new XmlParser().parse(manifestFile).attribute('package')\n```\n\n### 无用资源\n\n无用的资源就不要打包进APK了。\n>[Resource Shrinking](http://tools.android.com/tech-docs/new-build-system/resource-shrinking)\n\n### 一个Bug\n之前在创业公司，用[Travis](https://travis-ci.org/)做持续继承，遇到一个让我很纠结的问题。在Travis上执行构建脚本如下：\n\n```\n./gradlew clean\n./gradlew assembleXR\n```\n\n最后生成的APK在运行的时候报错，提示找不到某个.so文件，解压发现APK中果然缺少某个库工程的.so文件，但在本地运行的时候却是没有问题，纠结了好久，后来研究发现Android Studio中执行Clean Project的时候，会执行generateSources的任务，把它加入构建脚本后才打包正确。最近发现，这原来是个[Bug](https://code.google.com/p/android/issues/detail?id=106579&thanks=106579&ts=1421971822)，并且已经在android gradle1.3被修复了。\n\n匆匆忙忙间，写了很多东西。读完此文，希望你能感受到构建神器的魅力，感受到它的灵活强大，当然也希望能让你使用Gradle更加得心应手。","slug":"gradle-android","published":1,"updated":"2015-09-24T07:56:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cig3bgcnb0022x5ube26x9rfb"},{"title":"当Field邂逅65535","date":"2015-10-21T13:09:24.000Z","_content":"\n很多Android开发者都知道，同一个dex中方法数不能超过65535。为什么呢？来看一下[这篇文章](http://blog.csdn.net/t12x3456/article/details/40837287)，有3万的阅读量啊，当年一定风靡一时，作者说65535是dexopt引起的，我特马真是呵呵了，写文章不动脑子，dexopt都到了什么阶段了？再来看[这篇文章](http://blog.csdn.net/yzzst/article/details/48290701)，解释和上面如出一辙，可以看到前面那篇文章流毒不浅啊，关键这哥们貌似最近还出了本书，这种狗屁态度还好意思出书？\n\n『天下熙熙，皆为利来；天下攘攘，皆为利往。』大家写文章，为名为利无可厚非，有错误都是有情可原，但关键是要有点认真的态度啊。当年写[构建神器Gradle](http://www.csdn.net/article/2015-08-10/2825420)花了好几天的时间，投稿后又修改到深夜，依然还是有些错误，后来也在自己的博客上做了勘误更新。我看扔物线那篇RxJava的文章都有内测读者群，想来也是极为认真，非常尊敬这种态度，非常喜欢这样的开发者。\n\n## Field 65K\n\n言归正传，来聊聊为什么方法数不能超过65535？搬上Dalvik工程师在SF上的[回答](http://source.android.com/devices/tech/dalvik/dalvik-bytecode.html)，因为在[Dalvik指令集](http://source.android.com/devices/tech/dalvik/dalvik-bytecode.html)里，调用方法的`invoke-kind`指令中，method reference index只给了16bits，最多能调用65535个方法，所以在生成dex文件的过程中，当方法数超过65535就会报错。细看指令集，除了method，field和class的index也是16bits，所以也存在65535的问题。一般来说，method的数目会比field和class多，所以method数会首先遇到65535问题，你可能都没机会见到field过65535的情况。\n\n幸运的我见到了，呵呵。\n\n![错误](http://7fviov.com1.z0.glb.clouddn.com/171CE22C-3940-4ABA-AAB0-171B44394349.png)\n\n明明显示的是`DexException: Too many classes in --main-dex-list`，和field有毛关系？你可能想问我脑子是不是进水了，唉，明明是Google工程师脑子有问题，你看看Google自家兄弟提的[issue](https://code.google.com/p/android/issues/detail?id=184051&q=subcomponent%3DTools-gradle-ide%20attachments%3D0%20label%3Acomponent-Tools&colspec=ID%20Type%20Status%20Owner%20Summary%20Stars)就知道了。在使用multidex的情况下，主dex不管method还是field数目超了65535都会报Too many classes的错误，不使用multidex，就报正常的错误了，呵呵。\n\n你可能要纳闷了，我为啥会遇到field超65535的问题？看看我\"新大美\"同事写的，哈哈：\n>实际应用中我们还遇到另外一个比较棘手的问题， 就是Field的过多的问题，Field过多是由我们目前采用的代码组织结构引入的，我们为了方便多业务线、多团队并发协作的情况下开发，我们采用的aar的方式进行开发，并同时在aar依赖链的最底层引入了一个通用业务aar，而这个通用业务aar中包含了很多资源，而ADT14以及更高的版本中对Library资源处理时，Library的R资源不再是static final的了，详情请查看google官方说明，这样在最终打包时Library中的R没法做到内联，这样带来了R field过多的情况。\n\n差不多的情况，我们上层十几个业务线为独立module，都依赖base，而base的资源id有个三四千，上层R文件会把下层的R文件合并过来，使用multidex后，会把manifest里的activity、service等和其直接引用类加到main dex中，所以很多R文件涌入，field超个65535那都不叫事。\n\n## 修改R\n\nfield这么多怎么办呢？我们大胆假设只保留最顶层的R文件，因为这个R文件会把下层R文件合并过来，所有的R引用都可以指向这个文件。下层的类要引用最上层的R文件，下层不可能依赖上层，所以修改源代码肯定是走不通的，那就改class文件字节码吧。遍历class文件，把R的引用都指向最上层，把其他没用的R文件删掉。\n\n###问题\n思路有了，接下来的操作有以下问题：\n\n* 什么时候修改？\n\n\tdex过程是把全部class文件转换成dex文件，所以class字节码的修改要在dex之前，我们决定介入构建流程，在dex之前添加一个gradle任务，用来修改字节码。\n\n* 用什么修改？\n\n\t可以使用asm这个库，由于android gradle间接依赖asm，所以我们可以在build.gradle中直接import相关类。\n\n* 修改什么？\n\n\t当然是修改class文件，那么class文件的路径在哪里？主工程的`build/intermediates/exploded-aar`中包含了库工程aar解压后的内容，有很多jar文件，这些jar文件太过分散不好操作，由于我们使用了multidex，看一下dex任务的输入，发现是主工程的`build/intermediates/multi-dex/common/debug/allclasses.jar`文件，顾名思义，这个文件包含了所有的class文件，我们直接修改这个jar包里的class文件就可以了。\n\n###代码\n\n将下面这段代码放在主工程的build.gradle就不报错了。在我们的代码中，unifyRImport任务能跑个10秒钟左右，说长不长，说短不短。\n\n```\nimport org.apache.commons.compress.utils.IOUtils\nimport org.objectweb.asm.*\n\nimport java.util.jar.JarEntry\nimport java.util.jar.JarFile\nimport java.util.jar.JarOutputStream\nimport java.util.zip.ZipEntry\n\next {\n    dpPackagePrefix = 'com/dianping/'\n    libDrawableClass = 'com/dianping/nova/R\\$drawable.class'\n}\n\nbyte[] unifyR(InputStream inputStream, String rootPackagePrefix) {\n    ClassReader cr = new ClassReader(inputStream);\n    ClassWriter cw = new ClassWriter(cr, 0);\n    ClassVisitor cv = new ClassVisitor(Opcodes.ASM4, cw) {\n        @Override\n        public MethodVisitor visitMethod(int access, String name, String desc,\n                                         String signature, String[] exceptions) {\n            MethodVisitor mv = cv.visitMethod(access, name, desc, signature, exceptions);\n            mv = new MethodVisitor(Opcodes.ASM4, mv) {\n                @Override\n                void visitFieldInsn(int opcode, String owner, String fName, String fDesc) {\n                    if (owner.contains(dpPackagePrefix) && owner.contains(\"R\\$\") && !owner.contains(rootPackagePrefix)) {\n                        super.visitFieldInsn(opcode, rootPackagePrefix + \"R\\$\" + owner.substring(owner.indexOf(\"R\\$\") + 2), fName, fDesc);\n                    } else {\n                        super.visitFieldInsn(opcode, owner, fName, fDesc);\n                    }\n                }\n            }\n            return mv;\n        }\n\n    };\n    cr.accept(cv, 0);\n    return cw.toByteArray();\n}\n\nafterEvaluate {\n    def manifestFile = android.sourceSets.main.manifest.srcFile\n    def packageName = new XmlParser().parse(manifestFile).attribute('package')\n    def rootPackagePrefix = packageName.replace('.', '/') + '/'\n    println packageName\n    android.applicationVariants.each { variant ->\n        def dx = tasks.findByName(\"dex${variant.name.capitalize()}\")\n        def unifyRImport = \"unifyRImport${variant.name.capitalize()}\"\n        task(unifyRImport) << {\n            Set<File> inputFiles = dx.inputs.files.files\n            inputFiles.each {\n                if (it.name.endsWith(\".jar\")) {\n                    println it\n                    JarFile jarFile = new JarFile(it);\n                    Enumeration enumeration = jarFile.entries();\n                    File tmpFile = new File(it.getParent() + File.separator + \"classes.jar.tmp\");\n                    JarOutputStream jarOutputStream = new JarOutputStream(new FileOutputStream(tmpFile));\n\n\n                    while (enumeration.hasMoreElements()) {\n                        JarEntry jarEntry = (JarEntry) enumeration.nextElement();\n                        String entryName = jarEntry.getName();\n                        ZipEntry zipEntry = new ZipEntry(entryName);\n\n                        InputStream inputStream = jarFile.getInputStream(jarEntry);\n                        if (entryName.startsWith(dpPackagePrefix) && entryName.endsWith(\".class\")) {\n                            if (!entryName.contains(\"R\\$\")) {\n                                jarOutputStream.putNextEntry(zipEntry);\n                                jarOutputStream.write(unifyR(inputStream, rootPackagePrefix));\n                            } else {\n                                //NovaLib中R$drawable有被反射使用，不删除\n                                if (entryName.startsWith(rootPackagePrefix) || entryName.equals(libDrawableClass)) {\n                                    jarOutputStream.putNextEntry(zipEntry);\n                                    jarOutputStream.write(IOUtils.toByteArray(inputStream));\n                                }\n                            }\n                        } else {\n                            jarOutputStream.putNextEntry(zipEntry);\n                            jarOutputStream.write(IOUtils.toByteArray(inputStream));\n                        }\n                        jarOutputStream.closeEntry();\n                    }\n                    jarOutputStream.close();\n                    jarFile.close();\n                    tmpFile.renameTo(it);\n                }\n            }\n        }\n\n        tasks.findByName(unifyRImport).dependsOn dx.taskDependencies.getDependencies(dx)\n        dx.dependsOn tasks.findByName(unifyRImport)\n    }\n}\n\n```\n\n###坑\n我一般不喜欢用坑这个词，感觉遇到坑更多是因为无知，但特马这的确是个坑，在mac上跑的好好的，windows跑不通了，还是报class太多的错误。我一想两个系统文件分隔符不同，不会是路径上出了问题吧，最后竟然发现是`tmpFile.renameTo(it);`这行命令没有重命名成功，Google一搜发现遇到这坑的不在少数，a重命名成b，如果b已经存在，mac的做法直接覆盖，windows就会重命名失败。所以最后在rename前面加了一句，`it.delete();`。\n\n## dex任务增量 \n\n代码欢乐的跑了几天，有哥们提意见了，什么代码就不改，为什么点击run还要跑一两分钟？在这段时间的背后AS背地里做了什么？数百头母驴为何半夜惨叫？小卖部安全套为何屡遭黑手？女生宿舍内裤为何频频失窃？连环强奸母猪案，究竟是何人所为？老尼姑的门夜夜被敲，究竟是人是鬼？数百只小母狗意外身亡的背后又隐藏着什么？这一切的背后， 是人性的扭曲还是道德的沦丧？是性的爆发还是饥渴的无奈？唉，真是崇拜[爱哥](http://blog.csdn.net/aigestudio/article/details/43449123)。\n\n我们可以在AS中看到dex任务又重新跑了一遍，主要时间就花在这上面了。之前的[博客](http://jiajixin.cn/2015/08/07/gradle-android/#增量构建)讲过，任务增量构建要求输入和输出较上次没有区别，dex重新跑说明输入或者输出有变化，输出是多个dex文件我们没有改动，输入allclasses.jar虽然有更改，但因为源码不变，第二次运行allclasses.jar应该和上次一样的，不应该重新跑啊。比较了两次运行的allclasses.jar的md值，发现还真是不一样啊，看来问题就出在这里了。\n\n### zip哈希\n\n关键是为什么前后两次运行allclasses.jar的哈希值不同呢？\n\n话说之前向maven上打包上传aar的时候，发现代码资源都不改动，上传上去的aar哈希值竟然不同，为什么呢？一个简单的a.txt前后zip压缩两次，得到的zip文件哈希值也不同，用beyond compare看了下二进制，还真的不一样。那就去看看[zip算法](https://en.wikipedia.org/wiki/Zip_(file_format))吧，可以看到header中有时间戳相关的东西，应该就是这导致同样的文件zip压缩后哈希值不同。\n\njar打包也是用的zip算法，因为第一次运行我们修改了allclasses.jar，导致第二次运行时，某个任务的输出发生了变化，所以会重新运行生成allclasses.jar，前后两次的allclasses.jar哈希值就发生了变化，dex任务就要重新跑了。\n\n### 增量思路\n\n之前的问题，主要还是没有把allclasses.jar及时还原。因为allclasses.jar是dex的输入，所以我们需要在dex之后把allclasses.jar还原，既然需要还原，那就需要在修改allclasses.jar的时候有个备份（classes.bak）。还有个问题，每次unifyRImport任务运行时，都要重新去生成精简后的allclasses.jar，这一步可以加上缓存，根据allclasses.jar的md5值命名缓存文件（.jar.opt），如果有缓存直接复制成allclasses.jar就可以了。\n\n### 代码\n\n>Talk is cheap. Show me the code.\n\n```\nafterEvaluate {\n    def manifestFile = android.sourceSets.main.manifest.srcFile\n    def packageName = new XmlParser().parse(manifestFile).attribute('package')\n    def rootPackagePrefix = packageName.replace('.', '/') + '/'\n\n    android.applicationVariants.each { variant ->\n        def dx = tasks.findByName(\"dex${variant.name.capitalize()}\")\n        Set<File> inputFiles = dx.inputs.files.files\n        def allClassesJar;\n        inputFiles.each {\n            if (it.name.endsWith(\".jar\")) {\n                allClassesJar = it;\n            }\n        }\n\n        if (allClassesJar != null) {\n            def unifyRImport = \"unifyRImport${variant.name.capitalize()}\"\n            def bakJar = new File(allClassesJar.getParent(), allClassesJar.name + \".bak\")\n            task(unifyRImport) << {\n                File unifyRJar = new File(allClassesJar.getParent(), \"${md5(allClassesJar)}.jar.opt\")\n                if (!unifyRJar.exists()) {\n                    allClassesJar.getParentFile().eachFile { file ->\n                        if (file.name.endsWith(\".jar.opt\")) {\n                            file.delete()\n                        }\n                    }\n                    JarFile jarFile = new JarFile(allClassesJar);\n                    Enumeration enumeration = jarFile.entries();\n                    JarOutputStream jarOutputStream = new JarOutputStream(new FileOutputStream(unifyRJar));\n\n\n                    while (enumeration.hasMoreElements()) {\n                        JarEntry jarEntry = (JarEntry) enumeration.nextElement();\n                        String entryName = jarEntry.getName();\n                        ZipEntry zipEntry = new ZipEntry(entryName);\n\n                        InputStream inputStream = jarFile.getInputStream(jarEntry);\n                        if (entryName.startsWith(dpPackagePrefix) && entryName.endsWith(\".class\")) {\n                            if (!entryName.contains(\"R\\$\")) {\n                                jarOutputStream.putNextEntry(zipEntry);\n                                jarOutputStream.write(unifyR(inputStream, rootPackagePrefix));\n                            } else {\n                                //NovaLib中R$drawable有被反射使用，不删除\n                                if (entryName.startsWith(rootPackagePrefix) || entryName.equals(libDrawableClass)) {\n                                    jarOutputStream.putNextEntry(zipEntry);\n                                    jarOutputStream.write(IOUtils.toByteArray(inputStream));\n                                }\n                            }\n                        } else {\n                            jarOutputStream.putNextEntry(zipEntry);\n                            jarOutputStream.write(IOUtils.toByteArray(inputStream));\n                        }\n                        jarOutputStream.closeEntry();\n                    }\n                    jarOutputStream.close();\n                    jarFile.close();\n                }\n\n                if (bakJar.exists()) {\n                    bakJar.delete()\n                }\n                allClassesJar.renameTo(bakJar)\n                copyFileUsingStream(unifyRJar, allClassesJar)\n            }\n            tasks[unifyRImport].dependsOn dx.taskDependencies.getDependencies(dx)\n            dx.dependsOn tasks[unifyRImport]\n\n            //还原allclasses.jar\n            def assemble = tasks.findByName(\"assemble${variant.name.capitalize()}\")\n            def restoreClassesJar = \"restore${variant.name.capitalize()}\"\n            task(restoreClassesJar) << {\n                if (bakJar.exists()) {\n                    allClassesJar.delete()\n                    bakJar.renameTo(allClassesJar)\n                }\n            }\n            tasks[restoreClassesJar].dependsOn dx\n            assemble.dependsOn tasks[restoreClassesJar]\n        }\n    }\n}\n```\n这次主要修改了afterEvaluate里面的东西，然后新加了自定义的md5和copyFileUsingStream方法，groovy都有些脚本的特性了，获取md5和复制文件还要自己撸，我也是醉了。\n\n## dex增量\n\n至此，Field 65535的问题基本上算是完美解决了。但是你会发现改了一行代码，build的时间还是很久，主要耗时的任务就是dex，这个怎么搞？\n\n两种方案，[Buck](https://buckbuild.com/)和[LayoutCast](https://github.com/mmin18/LayoutCast)。Buck是facebook出品的，微信很早就用上了，但有很多规则，侵入性较强，代码改动大。 LayoutCast是我司屠大师研发的，对项目改动非常小，应该也有借鉴buck的一些思路。\n\n稍微看了一下buck的思路，buck的dex粒度非常小，每个module都会打成一个dex，最后合并成一个大的dex，修改代码后，只需要重新生成代码所在的dex，然后通过adb传递到手机，动态替换该dex即可，都不需要重新生成apk，也节省了安装的时间。","source":"_posts/field-65535.md","raw":"title: 当Field邂逅65535\ndate: 2015-10-21 21:09:24\ntags: [65k,65535,android,buck,gradle,field,Dalvik]\n---\n\n很多Android开发者都知道，同一个dex中方法数不能超过65535。为什么呢？来看一下[这篇文章](http://blog.csdn.net/t12x3456/article/details/40837287)，有3万的阅读量啊，当年一定风靡一时，作者说65535是dexopt引起的，我特马真是呵呵了，写文章不动脑子，dexopt都到了什么阶段了？再来看[这篇文章](http://blog.csdn.net/yzzst/article/details/48290701)，解释和上面如出一辙，可以看到前面那篇文章流毒不浅啊，关键这哥们貌似最近还出了本书，这种狗屁态度还好意思出书？\n\n『天下熙熙，皆为利来；天下攘攘，皆为利往。』大家写文章，为名为利无可厚非，有错误都是有情可原，但关键是要有点认真的态度啊。当年写[构建神器Gradle](http://www.csdn.net/article/2015-08-10/2825420)花了好几天的时间，投稿后又修改到深夜，依然还是有些错误，后来也在自己的博客上做了勘误更新。我看扔物线那篇RxJava的文章都有内测读者群，想来也是极为认真，非常尊敬这种态度，非常喜欢这样的开发者。\n\n## Field 65K\n\n言归正传，来聊聊为什么方法数不能超过65535？搬上Dalvik工程师在SF上的[回答](http://source.android.com/devices/tech/dalvik/dalvik-bytecode.html)，因为在[Dalvik指令集](http://source.android.com/devices/tech/dalvik/dalvik-bytecode.html)里，调用方法的`invoke-kind`指令中，method reference index只给了16bits，最多能调用65535个方法，所以在生成dex文件的过程中，当方法数超过65535就会报错。细看指令集，除了method，field和class的index也是16bits，所以也存在65535的问题。一般来说，method的数目会比field和class多，所以method数会首先遇到65535问题，你可能都没机会见到field过65535的情况。\n\n幸运的我见到了，呵呵。\n\n![错误](http://7fviov.com1.z0.glb.clouddn.com/171CE22C-3940-4ABA-AAB0-171B44394349.png)\n\n明明显示的是`DexException: Too many classes in --main-dex-list`，和field有毛关系？你可能想问我脑子是不是进水了，唉，明明是Google工程师脑子有问题，你看看Google自家兄弟提的[issue](https://code.google.com/p/android/issues/detail?id=184051&q=subcomponent%3DTools-gradle-ide%20attachments%3D0%20label%3Acomponent-Tools&colspec=ID%20Type%20Status%20Owner%20Summary%20Stars)就知道了。在使用multidex的情况下，主dex不管method还是field数目超了65535都会报Too many classes的错误，不使用multidex，就报正常的错误了，呵呵。\n\n你可能要纳闷了，我为啥会遇到field超65535的问题？看看我\"新大美\"同事写的，哈哈：\n>实际应用中我们还遇到另外一个比较棘手的问题， 就是Field的过多的问题，Field过多是由我们目前采用的代码组织结构引入的，我们为了方便多业务线、多团队并发协作的情况下开发，我们采用的aar的方式进行开发，并同时在aar依赖链的最底层引入了一个通用业务aar，而这个通用业务aar中包含了很多资源，而ADT14以及更高的版本中对Library资源处理时，Library的R资源不再是static final的了，详情请查看google官方说明，这样在最终打包时Library中的R没法做到内联，这样带来了R field过多的情况。\n\n差不多的情况，我们上层十几个业务线为独立module，都依赖base，而base的资源id有个三四千，上层R文件会把下层的R文件合并过来，使用multidex后，会把manifest里的activity、service等和其直接引用类加到main dex中，所以很多R文件涌入，field超个65535那都不叫事。\n\n## 修改R\n\nfield这么多怎么办呢？我们大胆假设只保留最顶层的R文件，因为这个R文件会把下层R文件合并过来，所有的R引用都可以指向这个文件。下层的类要引用最上层的R文件，下层不可能依赖上层，所以修改源代码肯定是走不通的，那就改class文件字节码吧。遍历class文件，把R的引用都指向最上层，把其他没用的R文件删掉。\n\n###问题\n思路有了，接下来的操作有以下问题：\n\n* 什么时候修改？\n\n\tdex过程是把全部class文件转换成dex文件，所以class字节码的修改要在dex之前，我们决定介入构建流程，在dex之前添加一个gradle任务，用来修改字节码。\n\n* 用什么修改？\n\n\t可以使用asm这个库，由于android gradle间接依赖asm，所以我们可以在build.gradle中直接import相关类。\n\n* 修改什么？\n\n\t当然是修改class文件，那么class文件的路径在哪里？主工程的`build/intermediates/exploded-aar`中包含了库工程aar解压后的内容，有很多jar文件，这些jar文件太过分散不好操作，由于我们使用了multidex，看一下dex任务的输入，发现是主工程的`build/intermediates/multi-dex/common/debug/allclasses.jar`文件，顾名思义，这个文件包含了所有的class文件，我们直接修改这个jar包里的class文件就可以了。\n\n###代码\n\n将下面这段代码放在主工程的build.gradle就不报错了。在我们的代码中，unifyRImport任务能跑个10秒钟左右，说长不长，说短不短。\n\n```\nimport org.apache.commons.compress.utils.IOUtils\nimport org.objectweb.asm.*\n\nimport java.util.jar.JarEntry\nimport java.util.jar.JarFile\nimport java.util.jar.JarOutputStream\nimport java.util.zip.ZipEntry\n\next {\n    dpPackagePrefix = 'com/dianping/'\n    libDrawableClass = 'com/dianping/nova/R\\$drawable.class'\n}\n\nbyte[] unifyR(InputStream inputStream, String rootPackagePrefix) {\n    ClassReader cr = new ClassReader(inputStream);\n    ClassWriter cw = new ClassWriter(cr, 0);\n    ClassVisitor cv = new ClassVisitor(Opcodes.ASM4, cw) {\n        @Override\n        public MethodVisitor visitMethod(int access, String name, String desc,\n                                         String signature, String[] exceptions) {\n            MethodVisitor mv = cv.visitMethod(access, name, desc, signature, exceptions);\n            mv = new MethodVisitor(Opcodes.ASM4, mv) {\n                @Override\n                void visitFieldInsn(int opcode, String owner, String fName, String fDesc) {\n                    if (owner.contains(dpPackagePrefix) && owner.contains(\"R\\$\") && !owner.contains(rootPackagePrefix)) {\n                        super.visitFieldInsn(opcode, rootPackagePrefix + \"R\\$\" + owner.substring(owner.indexOf(\"R\\$\") + 2), fName, fDesc);\n                    } else {\n                        super.visitFieldInsn(opcode, owner, fName, fDesc);\n                    }\n                }\n            }\n            return mv;\n        }\n\n    };\n    cr.accept(cv, 0);\n    return cw.toByteArray();\n}\n\nafterEvaluate {\n    def manifestFile = android.sourceSets.main.manifest.srcFile\n    def packageName = new XmlParser().parse(manifestFile).attribute('package')\n    def rootPackagePrefix = packageName.replace('.', '/') + '/'\n    println packageName\n    android.applicationVariants.each { variant ->\n        def dx = tasks.findByName(\"dex${variant.name.capitalize()}\")\n        def unifyRImport = \"unifyRImport${variant.name.capitalize()}\"\n        task(unifyRImport) << {\n            Set<File> inputFiles = dx.inputs.files.files\n            inputFiles.each {\n                if (it.name.endsWith(\".jar\")) {\n                    println it\n                    JarFile jarFile = new JarFile(it);\n                    Enumeration enumeration = jarFile.entries();\n                    File tmpFile = new File(it.getParent() + File.separator + \"classes.jar.tmp\");\n                    JarOutputStream jarOutputStream = new JarOutputStream(new FileOutputStream(tmpFile));\n\n\n                    while (enumeration.hasMoreElements()) {\n                        JarEntry jarEntry = (JarEntry) enumeration.nextElement();\n                        String entryName = jarEntry.getName();\n                        ZipEntry zipEntry = new ZipEntry(entryName);\n\n                        InputStream inputStream = jarFile.getInputStream(jarEntry);\n                        if (entryName.startsWith(dpPackagePrefix) && entryName.endsWith(\".class\")) {\n                            if (!entryName.contains(\"R\\$\")) {\n                                jarOutputStream.putNextEntry(zipEntry);\n                                jarOutputStream.write(unifyR(inputStream, rootPackagePrefix));\n                            } else {\n                                //NovaLib中R$drawable有被反射使用，不删除\n                                if (entryName.startsWith(rootPackagePrefix) || entryName.equals(libDrawableClass)) {\n                                    jarOutputStream.putNextEntry(zipEntry);\n                                    jarOutputStream.write(IOUtils.toByteArray(inputStream));\n                                }\n                            }\n                        } else {\n                            jarOutputStream.putNextEntry(zipEntry);\n                            jarOutputStream.write(IOUtils.toByteArray(inputStream));\n                        }\n                        jarOutputStream.closeEntry();\n                    }\n                    jarOutputStream.close();\n                    jarFile.close();\n                    tmpFile.renameTo(it);\n                }\n            }\n        }\n\n        tasks.findByName(unifyRImport).dependsOn dx.taskDependencies.getDependencies(dx)\n        dx.dependsOn tasks.findByName(unifyRImport)\n    }\n}\n\n```\n\n###坑\n我一般不喜欢用坑这个词，感觉遇到坑更多是因为无知，但特马这的确是个坑，在mac上跑的好好的，windows跑不通了，还是报class太多的错误。我一想两个系统文件分隔符不同，不会是路径上出了问题吧，最后竟然发现是`tmpFile.renameTo(it);`这行命令没有重命名成功，Google一搜发现遇到这坑的不在少数，a重命名成b，如果b已经存在，mac的做法直接覆盖，windows就会重命名失败。所以最后在rename前面加了一句，`it.delete();`。\n\n## dex任务增量 \n\n代码欢乐的跑了几天，有哥们提意见了，什么代码就不改，为什么点击run还要跑一两分钟？在这段时间的背后AS背地里做了什么？数百头母驴为何半夜惨叫？小卖部安全套为何屡遭黑手？女生宿舍内裤为何频频失窃？连环强奸母猪案，究竟是何人所为？老尼姑的门夜夜被敲，究竟是人是鬼？数百只小母狗意外身亡的背后又隐藏着什么？这一切的背后， 是人性的扭曲还是道德的沦丧？是性的爆发还是饥渴的无奈？唉，真是崇拜[爱哥](http://blog.csdn.net/aigestudio/article/details/43449123)。\n\n我们可以在AS中看到dex任务又重新跑了一遍，主要时间就花在这上面了。之前的[博客](http://jiajixin.cn/2015/08/07/gradle-android/#增量构建)讲过，任务增量构建要求输入和输出较上次没有区别，dex重新跑说明输入或者输出有变化，输出是多个dex文件我们没有改动，输入allclasses.jar虽然有更改，但因为源码不变，第二次运行allclasses.jar应该和上次一样的，不应该重新跑啊。比较了两次运行的allclasses.jar的md值，发现还真是不一样啊，看来问题就出在这里了。\n\n### zip哈希\n\n关键是为什么前后两次运行allclasses.jar的哈希值不同呢？\n\n话说之前向maven上打包上传aar的时候，发现代码资源都不改动，上传上去的aar哈希值竟然不同，为什么呢？一个简单的a.txt前后zip压缩两次，得到的zip文件哈希值也不同，用beyond compare看了下二进制，还真的不一样。那就去看看[zip算法](https://en.wikipedia.org/wiki/Zip_(file_format))吧，可以看到header中有时间戳相关的东西，应该就是这导致同样的文件zip压缩后哈希值不同。\n\njar打包也是用的zip算法，因为第一次运行我们修改了allclasses.jar，导致第二次运行时，某个任务的输出发生了变化，所以会重新运行生成allclasses.jar，前后两次的allclasses.jar哈希值就发生了变化，dex任务就要重新跑了。\n\n### 增量思路\n\n之前的问题，主要还是没有把allclasses.jar及时还原。因为allclasses.jar是dex的输入，所以我们需要在dex之后把allclasses.jar还原，既然需要还原，那就需要在修改allclasses.jar的时候有个备份（classes.bak）。还有个问题，每次unifyRImport任务运行时，都要重新去生成精简后的allclasses.jar，这一步可以加上缓存，根据allclasses.jar的md5值命名缓存文件（.jar.opt），如果有缓存直接复制成allclasses.jar就可以了。\n\n### 代码\n\n>Talk is cheap. Show me the code.\n\n```\nafterEvaluate {\n    def manifestFile = android.sourceSets.main.manifest.srcFile\n    def packageName = new XmlParser().parse(manifestFile).attribute('package')\n    def rootPackagePrefix = packageName.replace('.', '/') + '/'\n\n    android.applicationVariants.each { variant ->\n        def dx = tasks.findByName(\"dex${variant.name.capitalize()}\")\n        Set<File> inputFiles = dx.inputs.files.files\n        def allClassesJar;\n        inputFiles.each {\n            if (it.name.endsWith(\".jar\")) {\n                allClassesJar = it;\n            }\n        }\n\n        if (allClassesJar != null) {\n            def unifyRImport = \"unifyRImport${variant.name.capitalize()}\"\n            def bakJar = new File(allClassesJar.getParent(), allClassesJar.name + \".bak\")\n            task(unifyRImport) << {\n                File unifyRJar = new File(allClassesJar.getParent(), \"${md5(allClassesJar)}.jar.opt\")\n                if (!unifyRJar.exists()) {\n                    allClassesJar.getParentFile().eachFile { file ->\n                        if (file.name.endsWith(\".jar.opt\")) {\n                            file.delete()\n                        }\n                    }\n                    JarFile jarFile = new JarFile(allClassesJar);\n                    Enumeration enumeration = jarFile.entries();\n                    JarOutputStream jarOutputStream = new JarOutputStream(new FileOutputStream(unifyRJar));\n\n\n                    while (enumeration.hasMoreElements()) {\n                        JarEntry jarEntry = (JarEntry) enumeration.nextElement();\n                        String entryName = jarEntry.getName();\n                        ZipEntry zipEntry = new ZipEntry(entryName);\n\n                        InputStream inputStream = jarFile.getInputStream(jarEntry);\n                        if (entryName.startsWith(dpPackagePrefix) && entryName.endsWith(\".class\")) {\n                            if (!entryName.contains(\"R\\$\")) {\n                                jarOutputStream.putNextEntry(zipEntry);\n                                jarOutputStream.write(unifyR(inputStream, rootPackagePrefix));\n                            } else {\n                                //NovaLib中R$drawable有被反射使用，不删除\n                                if (entryName.startsWith(rootPackagePrefix) || entryName.equals(libDrawableClass)) {\n                                    jarOutputStream.putNextEntry(zipEntry);\n                                    jarOutputStream.write(IOUtils.toByteArray(inputStream));\n                                }\n                            }\n                        } else {\n                            jarOutputStream.putNextEntry(zipEntry);\n                            jarOutputStream.write(IOUtils.toByteArray(inputStream));\n                        }\n                        jarOutputStream.closeEntry();\n                    }\n                    jarOutputStream.close();\n                    jarFile.close();\n                }\n\n                if (bakJar.exists()) {\n                    bakJar.delete()\n                }\n                allClassesJar.renameTo(bakJar)\n                copyFileUsingStream(unifyRJar, allClassesJar)\n            }\n            tasks[unifyRImport].dependsOn dx.taskDependencies.getDependencies(dx)\n            dx.dependsOn tasks[unifyRImport]\n\n            //还原allclasses.jar\n            def assemble = tasks.findByName(\"assemble${variant.name.capitalize()}\")\n            def restoreClassesJar = \"restore${variant.name.capitalize()}\"\n            task(restoreClassesJar) << {\n                if (bakJar.exists()) {\n                    allClassesJar.delete()\n                    bakJar.renameTo(allClassesJar)\n                }\n            }\n            tasks[restoreClassesJar].dependsOn dx\n            assemble.dependsOn tasks[restoreClassesJar]\n        }\n    }\n}\n```\n这次主要修改了afterEvaluate里面的东西，然后新加了自定义的md5和copyFileUsingStream方法，groovy都有些脚本的特性了，获取md5和复制文件还要自己撸，我也是醉了。\n\n## dex增量\n\n至此，Field 65535的问题基本上算是完美解决了。但是你会发现改了一行代码，build的时间还是很久，主要耗时的任务就是dex，这个怎么搞？\n\n两种方案，[Buck](https://buckbuild.com/)和[LayoutCast](https://github.com/mmin18/LayoutCast)。Buck是facebook出品的，微信很早就用上了，但有很多规则，侵入性较强，代码改动大。 LayoutCast是我司屠大师研发的，对项目改动非常小，应该也有借鉴buck的一些思路。\n\n稍微看了一下buck的思路，buck的dex粒度非常小，每个module都会打成一个dex，最后合并成一个大的dex，修改代码后，只需要重新生成代码所在的dex，然后通过adb传递到手机，动态替换该dex即可，都不需要重新生成apk，也节省了安装的时间。","slug":"field-65535","published":1,"updated":"2015-10-22T08:57:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cig3bgcne002ax5ubfdsvinba"},{"title":"Android Studio插件开发","date":"2015-10-11T15:25:55.000Z","_content":"\n很早就想开发个Android Studio的插件了，本来想撸个清理无用资源的，但Android项目使用Gradle构建后，Lint检测出来的内容有所变化，不是很好判断要清理的资源，并且开启shrinkResources选项可以轻松的完成，所以放弃了。正好最近公司有个需求，可以做成个插件一键搞定，花了一天半的时间就搞定了。\n\n## 插件开发\nAndroid Studio基于IntelliJ IDEA开发，而IntelliJ IDEA是捷克软件公司JetBrains的作品，JetBrains成立十五年，做了很多语言的IDE，硕果累累，甚至还设计了Kotlin语言。\n\nAndroid Studio自身不具备开发插件的功能，由于Android Studio基于IntelliJ IDEA，所以可以为IntelliJ IDEA开发插件，同样可以用在Android Studio上。\n\nIntelliJ IDEA插件开发的官方文档可以看[这里](http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started.html)，需要下载IntelliJ IDEA，在IntelliJ IDEA上开发，方便调试的话需要下载源代码。大多数插件可能添加个action，再加点图形界面就差不多了，界面就是Swing那一套，当年写了那么多Swing程序，没想到现在还用的上。IntelliJ IDEA的API很多，可能很难都去读，用到什么现查吧，大多数直接用JDK就可以了。如果有些地方不太清楚的话，可以去Github上看看一些开源的插件是怎么搞的，比着葫芦画瓢估计也够用了。\n\n## Tips\n\n插件开发中遇到一些琐碎的东西搞不清楚，文档也不是很全，最终基本上也都找到解决方案，列几个Tips吧：\n\n* Toolbar图标\n\n\tplugin.xml中的action可以设置icon属性，但若把图片放在普通路径下会提示找不到，看到文档说放在固定目录下，但貌似也不起作用，最终放在`out>production>project`下才可以，要知道这个目录下都是一些编译好的class文件，直接放在这也是醉了。\n\n* Dialog居中显示\n\n\t`setLocationRelativeTo（null）`可以使其屏幕居中，但如果IDE不全屏，显示的效果就不好看了，想使Dialog在IDE窗口居中显示，可以这样设置：\n\n\t```\n\tsetLocationRelativeTo(WindowManager.getInstance().getFrame(actionEvent.getProject())\n\t```\n* Android SDK\n你要用Lint，那要找到Android SDK的目录，用下面这段代码：\n\n\t```\n\t\tpublic static Sdk findAndroidSDK() {\n\t        Sdk[] allJDKs = ProjectJdkTable.getInstance().getAllJdks();\n\t        for (Sdk sdk : allJDKs) {\n\t            if (sdk.getSdkType().getName().toLowerCase().contains(\"android\")) {\n\t                return sdk;\n\t            }\n\t        }\n\t\n\t        return null; // no Android SDK found\n\t    }\n\t```\n* 状态栏显示信息\n\n\t```\n\tStatusBar statusBar = WindowManager.getInstance().getStatusBar((Project) DataKeys.PROJECT.getData(actionEvent.getDataContext()));\n\tstatusBar.setInfo(\"要显示的内容\");\n\t```\n* 文件即时刷新\n\n\t修改文件后，不会在IDE中实时刷新，需要你调用VirtualFile的refresh方法。\n\t\n\t```\n\tVirtualFile vf = LocalFileSystem.getInstance().findFileByIoFile(new File(projectbuildFilePath));\nvf.refresh(true, false);\n\t```","source":"_posts/android-studio-plugin-dev.md","raw":"title: Android Studio插件开发\ndate: 2015-10-11 23:25:55\ntags: [Android Studio,插件,Android,IntelliJ IDEA,Java]\n---\n\n很早就想开发个Android Studio的插件了，本来想撸个清理无用资源的，但Android项目使用Gradle构建后，Lint检测出来的内容有所变化，不是很好判断要清理的资源，并且开启shrinkResources选项可以轻松的完成，所以放弃了。正好最近公司有个需求，可以做成个插件一键搞定，花了一天半的时间就搞定了。\n\n## 插件开发\nAndroid Studio基于IntelliJ IDEA开发，而IntelliJ IDEA是捷克软件公司JetBrains的作品，JetBrains成立十五年，做了很多语言的IDE，硕果累累，甚至还设计了Kotlin语言。\n\nAndroid Studio自身不具备开发插件的功能，由于Android Studio基于IntelliJ IDEA，所以可以为IntelliJ IDEA开发插件，同样可以用在Android Studio上。\n\nIntelliJ IDEA插件开发的官方文档可以看[这里](http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started.html)，需要下载IntelliJ IDEA，在IntelliJ IDEA上开发，方便调试的话需要下载源代码。大多数插件可能添加个action，再加点图形界面就差不多了，界面就是Swing那一套，当年写了那么多Swing程序，没想到现在还用的上。IntelliJ IDEA的API很多，可能很难都去读，用到什么现查吧，大多数直接用JDK就可以了。如果有些地方不太清楚的话，可以去Github上看看一些开源的插件是怎么搞的，比着葫芦画瓢估计也够用了。\n\n## Tips\n\n插件开发中遇到一些琐碎的东西搞不清楚，文档也不是很全，最终基本上也都找到解决方案，列几个Tips吧：\n\n* Toolbar图标\n\n\tplugin.xml中的action可以设置icon属性，但若把图片放在普通路径下会提示找不到，看到文档说放在固定目录下，但貌似也不起作用，最终放在`out>production>project`下才可以，要知道这个目录下都是一些编译好的class文件，直接放在这也是醉了。\n\n* Dialog居中显示\n\n\t`setLocationRelativeTo（null）`可以使其屏幕居中，但如果IDE不全屏，显示的效果就不好看了，想使Dialog在IDE窗口居中显示，可以这样设置：\n\n\t```\n\tsetLocationRelativeTo(WindowManager.getInstance().getFrame(actionEvent.getProject())\n\t```\n* Android SDK\n你要用Lint，那要找到Android SDK的目录，用下面这段代码：\n\n\t```\n\t\tpublic static Sdk findAndroidSDK() {\n\t        Sdk[] allJDKs = ProjectJdkTable.getInstance().getAllJdks();\n\t        for (Sdk sdk : allJDKs) {\n\t            if (sdk.getSdkType().getName().toLowerCase().contains(\"android\")) {\n\t                return sdk;\n\t            }\n\t        }\n\t\n\t        return null; // no Android SDK found\n\t    }\n\t```\n* 状态栏显示信息\n\n\t```\n\tStatusBar statusBar = WindowManager.getInstance().getStatusBar((Project) DataKeys.PROJECT.getData(actionEvent.getDataContext()));\n\tstatusBar.setInfo(\"要显示的内容\");\n\t```\n* 文件即时刷新\n\n\t修改文件后，不会在IDE中实时刷新，需要你调用VirtualFile的refresh方法。\n\t\n\t```\n\tVirtualFile vf = LocalFileSystem.getInstance().findFileByIoFile(new File(projectbuildFilePath));\nvf.refresh(true, false);\n\t```","slug":"android-studio-plugin-dev","published":1,"updated":"2015-10-17T19:54:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cig3bgcnk002px5ubj03b6xfd"},{"title":"Android SDK镜像服务器搭建","date":"2015-10-11T15:51:19.000Z","_content":"\n前段时间XcodeGhost闹的沸沸扬扬，意外发现迅雷下载真的是可以被污染的，详情见[对迅雷下载进行投毒的简单尝试](http://gold.xitu.io/entry/56023eabddb263b560c8d254)，也提醒了开发者不要随意从非官方渠道下载开发工具。\n\n我们都知道Android SDK由于国内网络环境的原因，下载速度很慢，有很多[国内搭建的镜像](http://www.androiddevtools.cn/)，但镜像服务器下载带宽肯定有一定限制，并且内网一般也会限制下载速度。所以在内网搭建一个Android SDK镜像服务器很有必要，一方面可以保证速度，几兆每秒肯定不成问题，另一方面大家从内网下载，也可以保证安全性。貌似有的团队用FTP存储SDK，还是太Low了，用起来肯定不如镜像方便。\n\n搭建Android SDK镜像服务器，有两个现成的开源解决方案，[苏州GDG](https://github.com/renfeng/android-repository)和[中科院开源镜像小组](https://github.com/opencas/mirrors)，苏州GDG牛皮吹的很响，貌似还在某个会议上发表过演讲，但估计是个人作品，东西不够完善，更新缓慢。中科院开源镜像小组开源的方案非常不错，并且也对外开放了镜像服务，一直运行良好，Github上还有定时同步和Nginx的配置信息。\n\n花了一个下午的时间，搞定了内网Android SDK镜像服务器，下载速度平均5M/s，效果杠杠的。\n\n## 下载SDK\n\n直接运行[android.py脚本](https://github.com/opencas/mirrors/blob/master/script/bin/android.py)，由于SDK下载需要翻墙，所以你可能需要代理。命令行程序默认不走你的全局代理，我在家用sock5代理，在mac下用的是[proxychains4](http://www.dreamxu.com/proxychains-ng/)，公司内网有Http代理服务器，想在命令行中使用，需要设置`http_proxy`和`https_proxy`环境变量，临时使用直接在终端中输入：\n\n```\nexport http_proxy=http://yourproxyaddress:proxyport\nexport https_proxy=http://yourproxyaddress:proxyport\n```\n\n细看脚本，你会发现脚本会先去下载`repository-*.xml`和`addons_list-*.xml`，xml里面是一些文件的具体下载地址，包含sdk、build_tools、support包等等，然后去下载具体的文件。\n\n## 服务器配置\n\n因为最终搭建的镜像要作为代理服务器，在SDK Manager中配置，所以需要你配置ngnix的虚拟主机。在`/etc/nginx/conf.d/default.conf`文件中，修改`server_name`字段：\n\n```\nserver_name dl.google.com\n            dl-ssl.google.com;\n```\n因为当SDK Manger配置你的镜像作为代理后，首先会拉取xml配置文件，比如`https://dl.google.com/android/repository/repository-11.xml`，最终会找到镜像服务器的`android/repository/repository-11.xml`文件，下载其他SDK文件也是同样，所以需要你把之前运行脚本下载的文件放到正确的目录中。\n\n## 使用\n别人要使用你的镜像，需要配置SDK Manager，直接去看[androiddevtools](http://www.androiddevtools.cn/)的介绍吧。","source":"_posts/android-sdk-mirror.md","raw":"title: Android SDK镜像服务器搭建\ndate: 2015-10-11 23:51:19\ntags: [Android,Android SDk,镜像,nginx]\n---\n\n前段时间XcodeGhost闹的沸沸扬扬，意外发现迅雷下载真的是可以被污染的，详情见[对迅雷下载进行投毒的简单尝试](http://gold.xitu.io/entry/56023eabddb263b560c8d254)，也提醒了开发者不要随意从非官方渠道下载开发工具。\n\n我们都知道Android SDK由于国内网络环境的原因，下载速度很慢，有很多[国内搭建的镜像](http://www.androiddevtools.cn/)，但镜像服务器下载带宽肯定有一定限制，并且内网一般也会限制下载速度。所以在内网搭建一个Android SDK镜像服务器很有必要，一方面可以保证速度，几兆每秒肯定不成问题，另一方面大家从内网下载，也可以保证安全性。貌似有的团队用FTP存储SDK，还是太Low了，用起来肯定不如镜像方便。\n\n搭建Android SDK镜像服务器，有两个现成的开源解决方案，[苏州GDG](https://github.com/renfeng/android-repository)和[中科院开源镜像小组](https://github.com/opencas/mirrors)，苏州GDG牛皮吹的很响，貌似还在某个会议上发表过演讲，但估计是个人作品，东西不够完善，更新缓慢。中科院开源镜像小组开源的方案非常不错，并且也对外开放了镜像服务，一直运行良好，Github上还有定时同步和Nginx的配置信息。\n\n花了一个下午的时间，搞定了内网Android SDK镜像服务器，下载速度平均5M/s，效果杠杠的。\n\n## 下载SDK\n\n直接运行[android.py脚本](https://github.com/opencas/mirrors/blob/master/script/bin/android.py)，由于SDK下载需要翻墙，所以你可能需要代理。命令行程序默认不走你的全局代理，我在家用sock5代理，在mac下用的是[proxychains4](http://www.dreamxu.com/proxychains-ng/)，公司内网有Http代理服务器，想在命令行中使用，需要设置`http_proxy`和`https_proxy`环境变量，临时使用直接在终端中输入：\n\n```\nexport http_proxy=http://yourproxyaddress:proxyport\nexport https_proxy=http://yourproxyaddress:proxyport\n```\n\n细看脚本，你会发现脚本会先去下载`repository-*.xml`和`addons_list-*.xml`，xml里面是一些文件的具体下载地址，包含sdk、build_tools、support包等等，然后去下载具体的文件。\n\n## 服务器配置\n\n因为最终搭建的镜像要作为代理服务器，在SDK Manager中配置，所以需要你配置ngnix的虚拟主机。在`/etc/nginx/conf.d/default.conf`文件中，修改`server_name`字段：\n\n```\nserver_name dl.google.com\n            dl-ssl.google.com;\n```\n因为当SDK Manger配置你的镜像作为代理后，首先会拉取xml配置文件，比如`https://dl.google.com/android/repository/repository-11.xml`，最终会找到镜像服务器的`android/repository/repository-11.xml`文件，下载其他SDK文件也是同样，所以需要你把之前运行脚本下载的文件放到正确的目录中。\n\n## 使用\n别人要使用你的镜像，需要配置SDK Manager，直接去看[androiddevtools](http://www.androiddevtools.cn/)的介绍吧。","slug":"android-sdk-mirror","published":1,"updated":"2015-10-11T17:08:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cig3bgcnm002xx5ubczqt2sim"},{"title":"关于Android的Data Binding技术","date":"2015-05-31T12:13:13.000Z","_content":"此次Google IO大会，给Andorid开发者带来了很多福利。我对其中的Data Binding技术最感兴趣，所以花时间研究了一下。\n\n## Data Binding与MVVM\nData Binding即数据绑定，在很多前端框架中都有应用，比如Google维护的AngularJS就支持View和Model的双向绑定。当数据更新，框架收到通知，视图可以自动更新，View和Model可以做到松耦合。\n\n有了Data Binding库的支持，在Android中可以很方便的实现MVVM的开发模式。MVVM，是Windows社区的一种叫法，即Model-View-ViewModel。在Android中，Activity，Fragment，Dialog之类都属于View层；Model层主要负责数据相关部分，可以从数据库或者网络获取；ViewModel主要是把Model转换为View可以呈现的东西，例如把一个Date类型转化为格式化后的String。\n\nViewModel在哪里呢？在Data Binding插件的支持下，会实时生成以Layout名称命名的Binding类，比如Layout名称为activity_main，则会生成ActivityMainBinding类，数据绑定在Layout文件中XML标注，最终在ActivityMainBinding中转化为Java代码，所以ActivityMainBinding类扮演了ViewModel的角色。\n\n在我看来，MVVM相对于传统的MVC，把一些业务逻辑抽离，放到ViewModel中，可以减轻Activity和Fragment的压力，同时数据绑定也大大减少了逻辑代码，另一方面对于测试来说，数据变化引起视图自动更新，可以更加方便测试。但在XML中进行数据绑定的操作，可能不利于调试。\n\n在Google官方发布Data Binding库之前，已经有类似的开源项目，如[RoboBinding](http://robobinding.github.io/RoboBinding/getting_started.zh.html)，支持双向绑定等，比较成熟，Google的库目前只支持单向绑定，为Beta版本，不知道后面是不是还有很多特性改进。你会发现，由于Android的开源特性，开发者在很多方面走在了Google的前面，比如这次发布的权限控制，国内很多ROM早就有了这个功能。我在想，当Google发布新版本的时候，会不会去看看MIUI有什么特性优化呢。\n\n##参考资料\n[Data Binding Guide](https://developer.android.com/tools/data-binding/guide.html) （官方资料）\n\n[Web开发的MVVM模式](http://www.cnblogs.com/dxy1982/p/3793895.html)（MVC VS. MVP VS. MVVM）\n\n[MVVM介绍](http://objccn.io/issue-13-1/)（iOS中MVVM的一种实现，对概念的理解有帮助）\n\n[MVVM on Android: What You Need to Know](http://www.willowtreeapps.com/blog/mvvm-on-android-what-you-need-to-know/) （这个博客很不错）\n\n[Animating Android Binding Transitions](http://www.willowtreeapps.com/blog/animating-android-binding-transitions/)（Data Binding技巧）\n##Sample\n官方貌似没有Data Binding的Sample，我写了个简单的Demo，Github地址：\nhttps://developer.android.com/tools/data-binding/guide.html","source":"_posts/Data Binding.md","raw":"---\ntitle: 关于Android的Data Binding技术\ndate: 2015-05-31 20:13:13\ntags: [Android,Data Binding,Google IO,MVVM]\n---\n此次Google IO大会，给Andorid开发者带来了很多福利。我对其中的Data Binding技术最感兴趣，所以花时间研究了一下。\n\n## Data Binding与MVVM\nData Binding即数据绑定，在很多前端框架中都有应用，比如Google维护的AngularJS就支持View和Model的双向绑定。当数据更新，框架收到通知，视图可以自动更新，View和Model可以做到松耦合。\n\n有了Data Binding库的支持，在Android中可以很方便的实现MVVM的开发模式。MVVM，是Windows社区的一种叫法，即Model-View-ViewModel。在Android中，Activity，Fragment，Dialog之类都属于View层；Model层主要负责数据相关部分，可以从数据库或者网络获取；ViewModel主要是把Model转换为View可以呈现的东西，例如把一个Date类型转化为格式化后的String。\n\nViewModel在哪里呢？在Data Binding插件的支持下，会实时生成以Layout名称命名的Binding类，比如Layout名称为activity_main，则会生成ActivityMainBinding类，数据绑定在Layout文件中XML标注，最终在ActivityMainBinding中转化为Java代码，所以ActivityMainBinding类扮演了ViewModel的角色。\n\n在我看来，MVVM相对于传统的MVC，把一些业务逻辑抽离，放到ViewModel中，可以减轻Activity和Fragment的压力，同时数据绑定也大大减少了逻辑代码，另一方面对于测试来说，数据变化引起视图自动更新，可以更加方便测试。但在XML中进行数据绑定的操作，可能不利于调试。\n\n在Google官方发布Data Binding库之前，已经有类似的开源项目，如[RoboBinding](http://robobinding.github.io/RoboBinding/getting_started.zh.html)，支持双向绑定等，比较成熟，Google的库目前只支持单向绑定，为Beta版本，不知道后面是不是还有很多特性改进。你会发现，由于Android的开源特性，开发者在很多方面走在了Google的前面，比如这次发布的权限控制，国内很多ROM早就有了这个功能。我在想，当Google发布新版本的时候，会不会去看看MIUI有什么特性优化呢。\n\n##参考资料\n[Data Binding Guide](https://developer.android.com/tools/data-binding/guide.html) （官方资料）\n\n[Web开发的MVVM模式](http://www.cnblogs.com/dxy1982/p/3793895.html)（MVC VS. MVP VS. MVVM）\n\n[MVVM介绍](http://objccn.io/issue-13-1/)（iOS中MVVM的一种实现，对概念的理解有帮助）\n\n[MVVM on Android: What You Need to Know](http://www.willowtreeapps.com/blog/mvvm-on-android-what-you-need-to-know/) （这个博客很不错）\n\n[Animating Android Binding Transitions](http://www.willowtreeapps.com/blog/animating-android-binding-transitions/)（Data Binding技巧）\n##Sample\n官方貌似没有Data Binding的Sample，我写了个简单的Demo，Github地址：\nhttps://developer.android.com/tools/data-binding/guide.html","slug":"Data Binding","published":1,"updated":"2015-07-06T16:18:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cig3bgcnp0035x5ubmpo7fmaw"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cig3bgcly0004x5ub1tx13td4","tag_id":"cig3bgcm20005x5ubywhh2lr3","_id":"cig3bgcm60009x5ub7zqp5lq7"},{"post_id":"cig3bgcly0004x5ub1tx13td4","tag_id":"cig3bgcm40006x5ubbe2ktooe","_id":"cig3bgcm6000ax5ub8s62bl13"},{"post_id":"cig3bgcly0004x5ub1tx13td4","tag_id":"cig3bgcm50007x5ubcqndpsem","_id":"cig3bgcm6000bx5ubpnjxjyie"},{"post_id":"cig3bgcly0004x5ub1tx13td4","tag_id":"cig3bgcm50008x5ubysseskgt","_id":"cig3bgcm6000cx5ubzfv931h1"},{"post_id":"cig3bgcm7000dx5ub1cwf3ygk","tag_id":"cig3bgcm8000ex5ubo57vh6rc","_id":"cig3bgcma000ix5ube5vskidd"},{"post_id":"cig3bgcm7000dx5ub1cwf3ygk","tag_id":"cig3bgcm9000fx5ubad90o4h1","_id":"cig3bgcma000jx5ub42ka1hcy"},{"post_id":"cig3bgcm7000dx5ub1cwf3ygk","tag_id":"cig3bgcm9000gx5ub2lclqcb9","_id":"cig3bgcma000kx5ubal0to56l"},{"post_id":"cig3bgcm7000dx5ub1cwf3ygk","tag_id":"cig3bgcm9000hx5ubxif3xc2b","_id":"cig3bgcma000lx5ubz7ayps32"},{"post_id":"cig3bgcmb000mx5ubqigee6nw","tag_id":"cig3bgcmd000nx5ubist1odq3","_id":"cig3bgcme000px5ubcy5e20cd"},{"post_id":"cig3bgcmb000mx5ubqigee6nw","tag_id":"cig3bgcm9000fx5ubad90o4h1","_id":"cig3bgcmf000qx5ubh18133y4"},{"post_id":"cig3bgcmb000mx5ubqigee6nw","tag_id":"cig3bgcme000ox5ubw2ed2wte","_id":"cig3bgcmf000rx5ubabdnfcqy"},{"post_id":"cig3bgcmg000sx5ubufeuc9wd","tag_id":"cig3bgcmh000tx5ubp5o2kvcf","_id":"cig3bgcmk0011x5ubypg5lwzd"},{"post_id":"cig3bgcmg000sx5ubufeuc9wd","tag_id":"cig3bgcmi000ux5ubo8fug7zg","_id":"cig3bgcml0012x5ubkesidjr1"},{"post_id":"cig3bgcmg000sx5ubufeuc9wd","tag_id":"cig3bgcmi000vx5ubcy62fkq6","_id":"cig3bgcml0013x5ubm6kmu43v"},{"post_id":"cig3bgcmg000sx5ubufeuc9wd","tag_id":"cig3bgcmj000wx5ubqj9elg5t","_id":"cig3bgcmm0014x5ubavb8y6wg"},{"post_id":"cig3bgcmg000sx5ubufeuc9wd","tag_id":"cig3bgcmj000xx5ubdpjb8e3e","_id":"cig3bgcmm0015x5ubeg2qjasq"},{"post_id":"cig3bgcmg000sx5ubufeuc9wd","tag_id":"cig3bgcmj000yx5ubry24bapl","_id":"cig3bgcmm0016x5ub192k4x9w"},{"post_id":"cig3bgcmg000sx5ubufeuc9wd","tag_id":"cig3bgcmk000zx5ub8y406b2l","_id":"cig3bgcmm0017x5ub5d8e71ov"},{"post_id":"cig3bgcmg000sx5ubufeuc9wd","tag_id":"cig3bgcmk0010x5uby73fubum","_id":"cig3bgcmn0018x5ub88bve3dv"},{"post_id":"cig3bgcmo0019x5ubpoe44mhf","tag_id":"cig3bgcm9000fx5ubad90o4h1","_id":"cig3bgcmu001dx5ubhaqmh0iy"},{"post_id":"cig3bgcmo0019x5ubpoe44mhf","tag_id":"cig3bgcms001ax5ub4eotkdcq","_id":"cig3bgcmu001ex5ubko3px2ds"},{"post_id":"cig3bgcmo0019x5ubpoe44mhf","tag_id":"cig3bgcms001bx5ubfmppkwc2","_id":"cig3bgcmu001fx5ubrhlebwpg"},{"post_id":"cig3bgcmo0019x5ubpoe44mhf","tag_id":"cig3bgcmt001cx5ubmq5m99ph","_id":"cig3bgcmu001gx5ub69i98kxv"},{"post_id":"cig3bgcmy001hx5ubwqpucp6x","tag_id":"cig3bgcn1001ix5ubnmiha8rw","_id":"cig3bgcn3001nx5ub363269c9"},{"post_id":"cig3bgcmy001hx5ubwqpucp6x","tag_id":"cig3bgcn2001jx5ubjjuk07hn","_id":"cig3bgcn4001ox5ubyxzjzzrl"},{"post_id":"cig3bgcmy001hx5ubwqpucp6x","tag_id":"cig3bgcn2001kx5ub55nisg7r","_id":"cig3bgcn4001px5ubyrh3pp8a"},{"post_id":"cig3bgcmy001hx5ubwqpucp6x","tag_id":"cig3bgcn3001lx5ubufuhhrpi","_id":"cig3bgcn4001qx5ubuab3fueb"},{"post_id":"cig3bgcmy001hx5ubwqpucp6x","tag_id":"cig3bgcn3001mx5ubomcy3wny","_id":"cig3bgcn4001rx5ubeg284cjb"},{"post_id":"cig3bgcn5001sx5ubninmkmr0","tag_id":"cig3bgcn6001tx5ub9ddgmwc8","_id":"cig3bgcn7001ux5uba3rtxlft"},{"post_id":"cig3bgcn8001vx5ubmaw1yqm7","tag_id":"cig3bgcn8001wx5ubs1yhpo2q","_id":"cig3bgcn9001yx5ubdiish9tj"},{"post_id":"cig3bgcn8001vx5ubmaw1yqm7","tag_id":"cig3bgcn9001xx5ubtzxoa1pp","_id":"cig3bgcna001zx5ubul9isfsd"},{"post_id":"cig3bgcn8001vx5ubmaw1yqm7","tag_id":"cig3bgcm50008x5ubysseskgt","_id":"cig3bgcna0020x5ubzjn0f60l"},{"post_id":"cig3bgcn8001vx5ubmaw1yqm7","tag_id":"cig3bgcm50007x5ubcqndpsem","_id":"cig3bgcna0021x5ub81mygptf"},{"post_id":"cig3bgcnb0022x5ube26x9rfb","tag_id":"cig3bgcnc0023x5ubx1z6whzz","_id":"cig3bgcnc0026x5ub6sblvlg4"},{"post_id":"cig3bgcnb0022x5ube26x9rfb","tag_id":"cig3bgcnc0024x5ub7owof73j","_id":"cig3bgcnc0027x5ub66ylwcxp"},{"post_id":"cig3bgcnb0022x5ube26x9rfb","tag_id":"cig3bgcm9000fx5ubad90o4h1","_id":"cig3bgcnc0028x5ubktzd0qco"},{"post_id":"cig3bgcnb0022x5ube26x9rfb","tag_id":"cig3bgcnc0025x5ub5419cfjz","_id":"cig3bgcnc0029x5ubm3c4maxa"},{"post_id":"cig3bgcne002ax5ubfdsvinba","tag_id":"cig3bgcne002bx5ub7cll6zmc","_id":"cig3bgcni002ix5ubxnvrnwry"},{"post_id":"cig3bgcne002ax5ubfdsvinba","tag_id":"cig3bgcnf002cx5ubcu6ise45","_id":"cig3bgcni002jx5ub8a09wl6z"},{"post_id":"cig3bgcne002ax5ubfdsvinba","tag_id":"cig3bgcnf002dx5ubqpl6qb76","_id":"cig3bgcni002kx5ubbg44e2be"},{"post_id":"cig3bgcne002ax5ubfdsvinba","tag_id":"cig3bgcng002ex5ubflxnmd5r","_id":"cig3bgcni002lx5ubvqj2xkgp"},{"post_id":"cig3bgcne002ax5ubfdsvinba","tag_id":"cig3bgcng002fx5ubgrrwqihz","_id":"cig3bgcni002mx5ubay6iv8wt"},{"post_id":"cig3bgcne002ax5ubfdsvinba","tag_id":"cig3bgcnh002gx5ub5f3i7z91","_id":"cig3bgcni002nx5ubs3b4e6wn"},{"post_id":"cig3bgcne002ax5ubfdsvinba","tag_id":"cig3bgcni002hx5ub3moq0zcx","_id":"cig3bgcnj002ox5ubu31mdug4"},{"post_id":"cig3bgcnk002px5ubj03b6xfd","tag_id":"cig3bgcnc0023x5ubx1z6whzz","_id":"cig3bgcnl002sx5ubg2xi4n0s"},{"post_id":"cig3bgcnk002px5ubj03b6xfd","tag_id":"cig3bgcnk002qx5ubwoiciz6l","_id":"cig3bgcnl002tx5ubh6iik8x0"},{"post_id":"cig3bgcnk002px5ubj03b6xfd","tag_id":"cig3bgcm9000fx5ubad90o4h1","_id":"cig3bgcnl002ux5ubmpexsqc3"},{"post_id":"cig3bgcnk002px5ubj03b6xfd","tag_id":"cig3bgcnl002rx5uboinie967","_id":"cig3bgcnl002vx5ubu7eq0riq"},{"post_id":"cig3bgcnk002px5ubj03b6xfd","tag_id":"cig3bgcms001bx5ubfmppkwc2","_id":"cig3bgcnl002wx5ubx0mf4jh5"},{"post_id":"cig3bgcnm002xx5ubczqt2sim","tag_id":"cig3bgcm9000fx5ubad90o4h1","_id":"cig3bgcno0031x5ub55ot2j6j"},{"post_id":"cig3bgcnm002xx5ubczqt2sim","tag_id":"cig3bgcnn002yx5ub8la5k5of","_id":"cig3bgcno0032x5ubbny23uk4"},{"post_id":"cig3bgcnm002xx5ubczqt2sim","tag_id":"cig3bgcno002zx5ubpymlonku","_id":"cig3bgcno0033x5ubjuvtgz7c"},{"post_id":"cig3bgcnm002xx5ubczqt2sim","tag_id":"cig3bgcno0030x5ub87xh0usc","_id":"cig3bgcno0034x5ub5skvs03e"},{"post_id":"cig3bgcnp0035x5ubmpo7fmaw","tag_id":"cig3bgcm9000fx5ubad90o4h1","_id":"cig3bgcnr0039x5ubcqepcu5l"},{"post_id":"cig3bgcnp0035x5ubmpo7fmaw","tag_id":"cig3bgcnq0036x5ubtjzi6m3j","_id":"cig3bgcnr003ax5ubk2gowr04"},{"post_id":"cig3bgcnp0035x5ubmpo7fmaw","tag_id":"cig3bgcnq0037x5ubme97j0y3","_id":"cig3bgcnr003bx5ubaio665ds"},{"post_id":"cig3bgcnp0035x5ubmpo7fmaw","tag_id":"cig3bgcnr0038x5ub35rjm1qm","_id":"cig3bgcnr003cx5ubq8616m2u"}],"Tag":[{"name":"小米","_id":"cig3bgcm20005x5ubywhh2lr3"},{"name":"数据库","_id":"cig3bgcm40006x5ubbe2ktooe"},{"name":"Web安全","_id":"cig3bgcm50007x5ubcqndpsem"},{"name":"创业","_id":"cig3bgcm50008x5ubysseskgt"},{"name":"webview","_id":"cig3bgcm8000ex5ubo57vh6rc"},{"name":"Android","_id":"cig3bgcm9000fx5ubad90o4h1"},{"name":"Javascript","_id":"cig3bgcm9000gx5ub2lclqcb9"},{"name":"安全","_id":"cig3bgcm9000hx5ubxif3xc2b"},{"name":"Slack","_id":"cig3bgcmd000nx5ubist1odq3"},{"name":"有态度","_id":"cig3bgcme000ox5ubw2ed2wte"},{"name":"总结","_id":"cig3bgcmh000tx5ubp5o2kvcf"},{"name":"实习","_id":"cig3bgcmi000ux5ubo8fug7zg"},{"name":"工作","_id":"cig3bgcmi000vx5ubcy62fkq6"},{"name":"百度","_id":"cig3bgcmj000wx5ubqj9elg5t"},{"name":"大众点评","_id":"cig3bgcmj000xx5ubdpjb8e3e"},{"name":"产品","_id":"cig3bgcmj000yx5ubry24bapl"},{"name":"校招","_id":"cig3bgcmk000zx5ub8y406b2l"},{"name":"offer","_id":"cig3bgcmk0010x5uby73fubum"},{"name":"内存泄露","_id":"cig3bgcms001ax5ub4eotkdcq"},{"name":"Java","_id":"cig3bgcms001bx5ubfmppkwc2"},{"name":"MAT","_id":"cig3bgcmt001cx5ubmq5m99ph"},{"name":"mac开发","_id":"cig3bgcn1001ix5ubnmiha8rw"},{"name":"显示桌面","_id":"cig3bgcn2001jx5ubjjuk07hn"},{"name":"开机启动","_id":"cig3bgcn2001kx5ub55nisg7r"},{"name":"状态栏","_id":"cig3bgcn3001lx5ubufuhhrpi"},{"name":"快捷键","_id":"cig3bgcn3001mx5ubomcy3wny"},{"name":"开篇","_id":"cig3bgcn6001tx5ub9ddgmwc8"},{"name":"锤子科技","_id":"cig3bgcn8001wx5ubs1yhpo2q"},{"name":"撞库","_id":"cig3bgcn9001xx5ubtzxoa1pp"},{"name":"Android Studio","_id":"cig3bgcnc0023x5ubx1z6whzz"},{"name":"Gradle","_id":"cig3bgcnc0024x5ub7owof73j"},{"name":"Groovy","_id":"cig3bgcnc0025x5ub5419cfjz"},{"name":"65k","_id":"cig3bgcne002bx5ub7cll6zmc"},{"name":"65535","_id":"cig3bgcnf002cx5ubcu6ise45"},{"name":"android","_id":"cig3bgcnf002dx5ubqpl6qb76"},{"name":"buck","_id":"cig3bgcng002ex5ubflxnmd5r"},{"name":"gradle","_id":"cig3bgcng002fx5ubgrrwqihz"},{"name":"field","_id":"cig3bgcnh002gx5ub5f3i7z91"},{"name":"Dalvik","_id":"cig3bgcni002hx5ub3moq0zcx"},{"name":"插件","_id":"cig3bgcnk002qx5ubwoiciz6l"},{"name":"IntelliJ IDEA","_id":"cig3bgcnl002rx5uboinie967"},{"name":"Android SDk","_id":"cig3bgcnn002yx5ub8la5k5of"},{"name":"镜像","_id":"cig3bgcno002zx5ubpymlonku"},{"name":"nginx","_id":"cig3bgcno0030x5ub87xh0usc"},{"name":"Data Binding","_id":"cig3bgcnq0036x5ubtjzi6m3j"},{"name":"Google IO","_id":"cig3bgcnq0037x5ubme97j0y3"},{"name":"MVVM","_id":"cig3bgcnr0038x5ub35rjm1qm"}]}}